(()=>{var e={391:(e,t,n)=>{var r=n(180),i=n(181),s=n(31),a=n(67),o=n(833),l=n(717),u=n(801);u.alea=r,u.xor128=i,u.xorwow=s,u.xorshift7=a,u.xor4096=o,u.tychei=l,e.exports=u},180:function(e,t,n){var r;!function(e,i){function s(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function o(e,t){var n=new s(e),r=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,i))||(i.exports=r):this.alea=o}(0,e=n.nmd(e),n.amdD)},717:function(e,t,n){var r;!function(e,i){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,i=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^i,t.a=i-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function o(e,t){var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,i))||(i.exports=r):this.tychei=o}(0,e=n.nmd(e),n.amdD)},181:function(e,t,n){var r;!function(e,i){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function o(e,t){var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,i))||(i.exports=r):this.xor128=o}(0,e=n.nmd(e),n.amdD)},833:function(e,t,n){var r;!function(e,i){function s(e){var t=this;t.next=function(){var e,n,r=t.w,i=t.X,s=t.i;return t.w=r=r+1640531527|0,n=i[s+34&127],e=i[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=i[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,i,s,a,o=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),i=0,s=-32;s<l;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(a=a+1640531527|0,i=0==(n=o[127&s]^=r+a)?i+1:0);for(i>=128&&(o[127&(t&&t.length||0)]=-1),i=127,s=512;s>0;--s)r=o[i+34&127],n=o[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[i]=r^n;e.w=a,e.X=o,e.i=i}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function o(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.X&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,i))||(i.exports=r):this.xor4096=o}(0,e=n.nmd(e),n.amdD)},67:function(e,t,n){var r;!function(e,i){function s(e){var t=this;t.next=function(){var e,n,r=t.x,i=t.i;return e=r[i],n=(e^=e>>>7)^e<<24,n^=(e=r[i+1&7])^e>>>10,n^=(e=r[i+3&7])^e>>>3,n^=(e=r[i+4&7])^e<<7,e=r[i+7&7],n^=(e^=e<<13)^e<<9,r[i]=n,t.i=i+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function o(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.x&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,i))||(i.exports=r):this.xorshift7=o}(0,e=n.nmd(e),n.amdD)},31:function(e,t,n){var r;!function(e,i){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function o(e,t){var n=new s(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(t,n,t,i))||(i.exports=r):this.xorwow=o}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(i,s,a){var o,l=256,u=a.pow(l,6),c=a.pow(2,52),h=2*c,_=l-1;function p(e,t,n){var r=[],_=g(f((t=1==t?{entropy:!0}:t||{}).entropy?[e,w(s)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(l):(e=new Uint8Array(l),(i.crypto||i.msCrypto).getRandomValues(e)),w(e)}catch(e){var t=i.navigator,n=t&&t.plugins;return[+new Date,i,n,i.screen,w(s)]}}():e,3),r),p=new d(r),b=function(){for(var e=p.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=p.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|p.g(4)},b.quick=function(){return p.g(4)/4294967296},b.double=b,g(w(p.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,p),e.state=function(){return m(p,{})}),n?(a.random=e,t):e})(b,_,"global"in t?t.global:this==a,t.state)}function d(e){var t,n=e.length,r=this,i=0,s=r.i=r.j=0,a=r.S=[];for(n||(e=[n++]);i<l;)a[i]=i++;for(i=0;i<l;i++)a[i]=a[s=_&s+e[i%n]+(t=a[i])],a[s]=t;(r.g=function(e){for(var t,n=0,i=r.i,s=r.j,a=r.S;e--;)t=a[i=_&i+1],n=n*l+a[_&(a[i]=a[s=_&s+t])+(a[s]=t)];return r.i=i,r.j=s,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function f(e,t){var n,r=[],i=typeof e;if(t&&"object"==i)for(n in e)try{r.push(f(e[n],t-1))}catch(e){}return r.length?r:"string"==i?e:e+"\0"}function g(e,t){for(var n,r=e+"",i=0;i<r.length;)t[_&i]=_&(n^=19*t[_&i])+r.charCodeAt(i++);return w(t)}function w(e){return String.fromCharCode.apply(0,e)}if(g(a.random(),s),e.exports){e.exports=p;try{o=n(234)}catch(e){}}else void 0===(r=function(){return p}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},234:()=>{}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";function e(e,t){return-1!=e.indexOf(t)}class t{constructor(e){this.set_active_function=()=>{},this.forwarder_name=e}input(e){this.automata.input(e)}add_activation_function(e){}set_active(){}}class r{constructor(e){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=e.start,this.states=e.states;for(let e=0;e<this.states.length;e++)this.transitions.push([]);for(let t of e.transitions){null==this.transitions&&console.log("Something is wrong here"),null!=this.transitions&&null!=t.from||console.log("Something is wrong here"),null==this.transitions[t.from]&&console.log("Something is wrong here");try{this.transitions[t.from].push(t)}catch(e){console.log("weird")}}this.init_function=e.init_function,this.end_states=e.end_states}input(e){let t=this.first_match(e),n=this.current_state;null!=t&&(this.current_state=t.next_state,t.action(n,e,this.current_state))}start(){this.current_state=this.start_state}first_match(e){for(let t=0;t<this.transitions[this.current_state].length;t++)if(this.transitions[this.current_state][t].accepts(e))return this.transitions[this.current_state][t];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(e){for(let t of this.transitions)for(let n of t)if(this.is_transition_to_end(n)){let t=n.action;n.action=(n,r,i)=>{t(n,r,i),e()}}}is_transition_to_end(t){return e(this.end_states,t.next_state)}add_action_to_transitions(e,t){for(let n of this.transitions)for(let r of n)if(e(r)){let e=r.action;r.action=(n,r,i)=>{e(n,r,i),t()}}}}class i extends t{constructor(e,t,n,r){super(e),this.pre_run_instructions=n,this.post_run_instructions=r,this.measurement=t,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new r(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(e){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==e||null==e?console.log("something is strange"):e()}}class s{constructor(e,t,n,r,i){this.states=e,this.start=t,this.init_function=n,this.transitions=r,this.end_states=i}}class a{}class o extends a{constructor(e){super(),this.acceptor_function=e}accepts(e){return this.acceptor_function(e)}}class l{constructor(e,t,n,r){this.from=e,this.acceptor=t,this.next_state=n,this.action=r}is_valid_input(e){return this.acceptor.accepts(e)}accepts(e){return this.acceptor.accepts(e)}}function u(e,t,n,r){return new l(e,new o(t),n,((e,t,n)=>r(t)))}function c(t){return{to:n=>({on:e=>({if:r=>({do:i=>u(t,(t=>t==e&&r(t)),n,i)}),do:r=>u(t,(t=>t==e),n,r)}),on_any:r=>({if:i=>({do:s=>u(t,(t=>e(r,t)&&i(t)),n,s)}),do:i=>u(t,(t=>e(r,t)),n,i)})})}}class h{constructor(e,t){this.answer=null,this.variable_name=e,this.question_text=t}store_answer(){let e=document.getElementById(this.variable_name);this.answer=e.value}}class _ extends h{constructor(e,t,n){super(e,t),this.alternatives=n}input_html(){let e='<select id="'+this.variable_name+'">';e+="<option disabled selected value> -- select an option -- </option>";let t=0;return this.alternatives.forEach((n=>e+="<option value="+t+++">"+n+"</option>")),e+="</select>",e}store_answer(){let e=document.getElementById(this.variable_name);this.answer=this.alternatives[e.value]}}class p extends h{html_string(){}input_html(){return'<input type="text" id="'+this.variable_name+'">'}}class d extends i{constructor(e,t){super("Questionnaire",t,(()=>t.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>t.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=e}automata_configurator(){return new s([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[c(0).to(4).on("DONE").if((e=>!0)).do((e=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let e=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(e),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let e="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((t=>e+="<tr><td>"+t.question_text+"</td><td>"+t.input_html()+"</td></tr>")),e+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",e}add_result_to_question(){for(let e of this.questions)e.store_answer()}}var m=n(391),f=n.n(m);class g{convert_string_to_html_string(e){return function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(e)}string_page_command(e){return()=>this.print_string_on_stage(e)}stage_string_pages_commands(e){let t=[];for(let n of e)t.push(this.string_page_command(n));return t}get_given_answer(e){return e}print_on_input_response(e){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}class w{constructor(e){this.input_type=e}accepted_responses(){return this.input_type.accepted_responses()}given_answer(e){return this.input_type.given_answer(e)}start_measurement(e){this.start_time=(new Date).getTime().valueOf(),e.print_task()}stop_measurement(e,t){let n=(new Date).getTime().valueOf();t.given_answer=this.input_type.get_given_answer(e),t.required_milliseconds=n-this.start_time,t.do_print_after_task_information()}incorrect_response(e,t){let n=(new Date).getTime().valueOf(),r=t.experiment_definition.measurement.get_given_answer(e);t.invalid_answers.push([r,n-this.start_time]),t.do_print_error_message(this.input_type.get_given_answer(e))}output_writer(){return this.input_type.output_writer}get_given_answer(e){return this.input_type.get_given_answer(e)}demands_penalty(){return!1}penalty_is_over(){return!0}}class b extends w{constructor(e){super(e)}}class v extends w{constructor(e,t){super(e),this.penalty_started=!1,this.penalty_start_point=null,this.penalty_miliseconds=1e3*t}demands_penalty(){return!0}incorrect_response(e,t){super.incorrect_response(e,t),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),t.do_print_error_message(this.input_type.get_given_answer(e))}delete_penalty(){this.penalty_started=!1,this.penalty_start_point=null}penalty_is_over(){let e=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||e>=this.penalty_miliseconds}start_measurement(e){super.start_measurement(e),this.delete_penalty()}}class y extends w{constructor(e){super(e)}}class x extends y{constructor(e,t){super(e),this.penalty_started=!1,this.penalty_start_point=null,this.penalty_miliseconds=1e3*t}demands_penalty(){return!0}incorrect_response(e,t){super.incorrect_response(e,t),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),t.do_print_error_message(this.input_type.get_given_answer(e))}delete_penalty(){this.penalty_started=!1,this.penalty_start_point=null}penalty_is_over(){let e=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||e>=this.penalty_miliseconds}start_measurement(e){super.start_measurement(e),this.delete_penalty()}}class k{constructor(e){this.output_writer=e}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(e){return this.output_writer.get_given_answer(e)}}class E extends k{constructor(e,t){super(t),this.accepted_keys=e}accepted_responses(){return this.accepted_keys}given_answer(e){return e}print_input_request(){}get_given_answer(e){return e}}class q extends k{constructor(e){super(e)}accepted_responses(){return["Enter"]}given_answer(e){}print_input_request(){this.output_writer.ask_for_input()}}const C=new class{constructor(){f()("1234567890",{global:!0})}new_random_integer(e){return Math.trunc(e*Math.random())}set_seed(e){f()(e,{global:!0})}};function j(e){C.set_seed(e)}function T(e){return C.new_random_integer(e)}function A(e){return e[T(e.length)]}function S(e){for(;;){let t=String.fromCharCode(97+T(26));if(!e.includes(t))return t}}f()();class O{constructor(e,t,n){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.has_pre_task_description=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_pre_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=e=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=e,this.experiment_definition=t}accepts_answer(e){let t=this.experiment_definition.measurement.get_given_answer(e);return this.accepts_answer_function(t)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(e,t){}html_node_with_cmd(e,t){}after_task_string_constructor(e){}print_task(){this.do_print_task(),this.print_input_request()}print_pre_task_info(){this.do_print_pre_task()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}treatment_value(e){for(let t of this.treatment_combination.treatment_combination)if(t.variable.name===e)return t.value;throw"Unknown treatment: "+e}set_computed_variable_value(e,t){for(let n of this.treatment_combination.treatment_combination)if(n.variable.name===e)return void(n.value=t);throw"Unknown treatment: "+e}}class z{constructor(e,t){this.variables=e,this.repetitions=t}clone(){return new z(this.variables,this.repetitions)}create_treatment_combinations(){let e=[];for(let t=0;t<this.repetitions;t++)e=e.concat(this.variables.create_treatment_combinations());return e}create_tasks(e){let t=[];for(let n of this.create_treatment_combinations()){let r=new O(n.clone(),e,"");try{e.experiment_definition_task_creator(r)}catch(t){console.log("halt"),e.experiment_definition_task_creator(r)}r.is_training=e.is_training,t.push(r)}return function(e){let t=[...e],n=[];for(;t.length>0;)n.push(t.splice(T(t.length),1)[0]);return n}(t)}get_variable_named(e){return this.variables.get_variable_named(e)}}class D{constructor(e,t,n,r,i,s,a){this.questionnaires=[],this.tasks=[],this.experiment_name=e,this.is_training=t,this.template={experiment_name:e,variables:r,repetitions:i,task_creator:a},this.treatments_combinator=n,this.variables=r,this.measurement=s,this.experiment_definition_task_creator=a}init_experiment(e){this.tasks=this.treatments_combinator.create_tasks(this)}all_independent_variables(){return this.variables.independent_variables}generate_csv_data(){let e=[];for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.variable_name+'";');this.variables.print_to_array(e),e.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let t of this.tasks){for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.answer+'";');for(let n of t.treatment_combination.treatment_combination)e.push(n.value+";");e.push(t.invalid_answers.length+1+";"),e.push(t.expected_answer+";"),e.push(t.given_answer+";"),e.push((t.given_answer==t.expected_answer)+";"),e.push(t.required_milliseconds+";"),t.invalid_answers.forEach((t=>e.push(t[0]+";"+t[1]+";"))),e.push("\n")}return e}}class R extends i{constructor(e,t,n){super(e,n,t[0],t[t.length-1]),this.current_page_number=-1,this.pages=t,this.create_automata()}set_page_index(e){this.current_page_number=e,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let t="<hr>";e>0&&(t+="[&#8592] = previous page"),e<this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[&#8594] = next page"),e==this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(t)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new s([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[c(0).to(0).on("ArrowRight").if((e=>this.current_page_number<this.pages.length-1)).do((e=>{this.set_page_index(++this.current_page_number)})),c(0).to(0).on("ArrowLeft").if((e=>this.current_page_number>0)).do((e=>{this.set_page_index(--this.current_page_number)})),c(0).to(1).on("Enter").if((e=>this.current_page_number>=this.pages.length-1)).do((e=>{}))]}}class U extends t{constructor(e){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=e;for(let t of e)t.automata.add_finish_action((()=>this.automata.input("switch to next state")));var t,n,i;this.automata=(t=[0,1],n=()=>{},i=[c(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),c(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new r(new s(t,0,n,i,[1]))),this.automata.initialize()}input(e){this.forwarders[this.current_forwarder_index].input(e)}input_sequence(e){for(let t of e)this.input(t)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class M extends i{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new s([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(e,t,n,r,i){super(e,i,t,n),this.current_page_index=-1,this.experiment_definition=r}automata_configuration(){return new s([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}transitions(){return[c(0).to(2).on("Enter").if((e=>!this.first_task().has_pre_task_description)).do((e=>{this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),c(0).to(1).on("Enter").if((e=>this.first_task().has_pre_task_description)).do((e=>{this.set_experiment_index(0),this.show_pre_task_info()})),c(0).to(5).on("Delete").do((e=>{this.show_outro()})),c(1).to(2).on("Enter").do((e=>{this.measurement.start_measurement(this.current_task())})),c(2).to(2).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&!this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),c(2).to(5).on("?+Control").if((e=>!0)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),c(2).to(4).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task())})),c(2).to(3).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),c(3).to(2).on("Enter").if((e=>this.measurement.penalty_is_over())).do((e=>{this.measurement.start_measurement(this.current_task())})),c(4).to(1).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.next_task().has_pre_task_description)).do((e=>{this.inc_current_experiment(),this.show_pre_task_info()})),c(4).to(2).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1&&!this.next_task().has_pre_task_description)).do((e=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),c(2).to(5).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),c(5).to(6).on("Enter").do((e=>{}))]}set_experiment_index(e){this.current_page_index=e,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(){this.experiment_definition.init_experiment(!1)}show_pre_task_info(){this.output_writer().clear_stage(),this.output_writer().clear_error(),this.current_task().print_pre_task_info()}next_task(){return this.experiment_definition.tasks[this.current_page_index+1]}first_task(){return this.experiment_definition.tasks[0]}}class L extends M{constructor(e,t,n,r){super("Training",(()=>{e(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{r.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(t.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),n,r),this.training_configuration=t}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new s([0,1,2,3,4,5,6,7],0,(()=>{}),this.transitions(),[6])}transitions(){let e=super.transitions(),t=[c(0).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),c(2).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),c(4).to(7).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),c(7).to(6).on("E").do((()=>{})),c(7).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),c(5).to(0).on("Enter").if((()=>this.training_configuration.can_be_repeated)).do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),c(5).to(6).on("E").do((e=>{}))];return e.splice(e.length-1),t.forEach((t=>e.push(t))),e}input(e){if(!["a","b","c"].includes(e)&&0!=this.automata.current_state)return super.input(e);super.input(e)}init_experiment(){this.training_configuration.init_experiment(this.experiment_definition)}}class P extends M{constructor(e,t,n){super("Main Experiment",(()=>{e(),n.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{n.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),t,n)}}class I extends D{create_code_all_experiment_automatas(e){e.measurement.output_writer();let t=new R("Introduction",e.introduction_texts,e.measurement),n=new R("Finish",e.finish_texts,e.measurement);n.automata.add_finish_action((()=>e.finish_function(r.experiment_definition)));let r=new P(e.pre_run_experiment_output,this,e.measurement);r.init_experiment();let i=this.clone(),s=new L(e.pre_run_training_output,e.training_configuration,i,e.measurement);s.init_experiment();let a=null;null!=e.post_questionnaire&&(a=new d(e.post_questionnaire,e.measurement));let o=[];return null!=t&&o.push(t),0!=s.experiment_definition.tasks.length&&o.push(s),o.push(r),null!=a&&(o.push(a),r.experiment_definition.questionnaires.push(a)),o.push(n),new U(o)}clone(){return new I(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}}class N{constructor(e,t){this.variable=e,this.value=""+t}clone(){return new N(this.variable,this.value)}}function B(e,t,n){if(e.length>t.length)throw"Cannot loop both: first array has length: "+e.length+", but second has length "+t.length;let r=0;for(let i of e)n(i,t[r++])}class G{constructor(e){this.treatment_combination=[],this.treatment_combination=e}clone(){let e=new G([]);for(let t of this.treatment_combination)e.treatment_combination.push(t.clone());return e}}class F{constructor(e){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==e&&(null!=e.fixed_treatments&&(this.fixed_treatments=e.fixed_treatments),this.can_be_cancelled=e.can_be_cancelled,this.can_be_repeated=e.can_be_repeated)}init_experiment(e){if(e.tasks=[],null!=this.fixed_treatments)for(let t of this.fixed_treatments){let n=new G([]);B(e.all_independent_variables(),t,((e,t)=>{n.treatment_combination.push(new N(e,t))}));let r=new O(n,e,"");r.is_training=!0,e.experiment_definition_task_creator(r),e.tasks.push(r)}else e.init_experiment(!0)}}class K{constructor(e,t){this.treatments=[],this.name=e;for(let e of t)this.treatments.push(new N(this,e))}}function X(e,t,n){if(0==e.length)n(t);else{let r=e.shift();for(let i of r)t.push(i),X(e,t,n),t.pop();e.unshift(r)}}function H(e,t){X(e,[],t)}class Y{constructor(){this.independent_variables=[]}push_variable(e,t){this.independent_variables.push(new K(e,t))}print_to_array(e){for(let t of this.independent_variables)e.push(t.name+";")}create_treatment_combinations(){let e=[];return H(this.independent_variables.map((e=>e.treatments)),(t=>{e.push(new G([...t]))})),e}get_variable_named(e){for(let t of this.independent_variables)if(t.name===e)return t;throw"Unknown independent variable named: "+e}static from_layout(e){let t=new Y;for(let n of e)t.push_variable(n.variable,n.treatments);return t}}class Q extends g{print_experiment_name(e){this.get_html_element_by_id("STATE").innerHTML=e}clear_error(){let e=["STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_stage(){let e=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_state(){let e=["STATE","TASK"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}print_error_string_on_stage(e){this.get_html_element_by_id("STAGE_ERROR").innerHTML=e}get_html_element_by_id(e){return document.getElementById(e)}print_string_to_state(e){this.get_html_element_by_id("STATE").innerHTML=e}print_string_on_stage(e){this.print_html_on_stage("<p>"+e+"</p>")}ask_for_input(){let e=document.createElement("p"),t=document.createElement("label");t.setAttribute("type","text"),e.textContent="Answer: ",e.appendChild(t);let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","input"),e.appendChild(n),n.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(e),n.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(e){this.get_html_element_by_id("TASK").innerHTML=e}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(e){this.get_html_element_by_id("INPUT").value=e}create_html_element_from_string(e){return(new DOMParser).parseFromString(e,"text/html").body}print_html_on_stage(e){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(e))}print_html_on_error(e){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(e))}}function V(e){let t=[];if(0==e)return[];for(let n=1;n<=e;n++){let r=V(e-n);for(let e of r){let r=[n];for(let t of e)r.push(t);t.push(r)}0==r.length&&t.push([e])}return t}function W(e,t){if(1==t)return[[e]];let n=[];for(let r=0;r<=e;r++){let i=W(e-r,t-1);for(let e of i){if(e.length!=t-1)throw"invalid partition!";let i=[r];for(let t of e)i.push(t);n.push(i)}0==i.length&&n.push([e])}return n}!function(){let e=[];e=V(4),e=V(0),console.log(e)}();class J{pull_random_word(){return this.words.splice(T(this.words.length),1)[0]}pull_n_random_words(e){return this.pull_n_random_formatted_words(e,(e=>e))}pull_n_random_formatted_words(e,t){let n=[];for(let r=0;r<e;r++)n.push(t(this.pull_random_word()));return n}max_word_length(){return Math.max.apply(null,this.words.map((e=>e.length)))}min_word_length(){return Math.min.apply(null,this.words.map((e=>e.length)))}generate_composite_identifier_of_length(e){if(e<=5)return A(this.words.filter((t=>t.length==e)));let t=Math.floor(e/2);return this.generate_composite_identifier_of_length(t)+this.generate_composite_identifier_of_length(e-t)}get_random_word_of_length(e){let t=A(this.words.filter((t=>t.length==e)));if(null==t)throw"shit";return t}get_random_word_list(e,t){let n=this.min_word_length(),r=this.max_word_length(),i=[],s=A(function(e,t){let i=W(e,t),s=[];for(let e of i){let i=!0;for(let t of e)if(!((a=t)>=n&&a<=r)){i=!1;break}if(i){if(e.length!=t&&console.log("strange"),e.length!=t)throw"wtf";s.push(e)}}var a;return s}(t,e));for(let e of s)i.push(this.get_random_word_of_length(e));return i}replace_letters_starting_at(e,t,n){let r=e.slice(0,n);r+=S([e[n]]);let i=e.slice(n+1,e.length);return this.replace_letters(i,t-1).map((e=>r+e))}replace_letters(e,t){if(0==t)return""==e?[]:[e];if(1==e.length&&1==t)return[S([e[0]])];if(t>e.length)return[];let n=[],r=W(t,2);for(let t of r)for(let r=1;r<e.length;r++){let i=e.slice(0,r),s=this.replace_letters(i,t[0]),a=e.slice(r);H([s,this.replace_letters(a,t[1])],(e=>{n.push(e[0]+e[1])}))}return n}}J.capitalizeFirstLetter_formatter=e=>String(e).charAt(0).toUpperCase()+String(e).slice(1),J.lowerCaseFirstLetter_formatter=e=>String(e).charAt(0).toLowerCase()+String(e).slice(1);class Z extends J{constructor(){super(),this.words=Z.static_words.slice()}}Z.static_words=["account","achiever","acoustics","act","action","activity","actor","addition","adjustment","advertisement","advice","aftermath","afternoon","afterthought","agreement","air","airplane","airport","alarm","amount","amusement","anger","angle","animal","ants","apparatus","apparel","appliance","approval","arch","argument","arithmetic","arm","army","art","attack","attraction","aunt","authority","back","badge","bag","bait","balance","ball","base","baseball","basin","basket","basketball","bat","bath","battle","bead","bear","bed","bedroom","beds","bee","beef","beginner","behavior","belief","believe","bell","bells","berry","bike","bikes","bird","birds","birth","birthday","bit","bite","blade","blood","blow","board","boat","bomb","bone","book","books","boot","border","bottle","boundary","box","brake","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","cabbage","cable","cactus","cake","cakes","calculator","calendar","camera","camp","can","cannon","canvas","cap","caption","car","card","care","carpenter","carriage","cars","cart","cast","cat","cats","cattle","cause","cave","celery","cellar","cemetery","cent","chalk","chance","change","channel","cheese","cherries","cherry","chess","chicken","chickens","chin","church","circle","clam","cloth","clover","club","coach","coal","coast","coat","cobweb","coil","collar","color","committee","company","comparison","competition","condition","connection","control","cook","copper","corn","cough","country","cover","cow","cows","crack","cracker","crate","crayon","cream","creator","creature","credit","crib","crime","crook","crow","crowd","crown","cub","cup","current","curtain","curve","cushion","dad","daughter","day","death","debt","decision","deer","degree","design","desire","desk","destruction","detail","development","digestion","dime","dinner","dinosaurs","direction","dirt","discovery","discussion","distance","distribution","division","dock","doctor","dog","dogs","doll","dolls","donkey","door","downtown","drain","drawer","dress","drink","driving","drop","duck","ducks","dust","ear","earth","earthquake","edge","education","effect","egg","eggnog","eggs","elbow","end","engine","error","event","example","exchange","existence","expansion","experience","expert","eye","eyes","face","fact","fairies","fall","fang","farm","fear","feeling","field","finger","fire","fireman","fish","flag","flame","flavor","flesh","flight","flock","floor","flower","flowers","fly","fog","fold","food","foot","force","fork","form","fowl","frame","friction","friend","friends","frog","frogs","front","fruit","fuel","furniture","gate","geese","ghost","giants","giraffe","glass","glove","gold","government","governor","grade","grain","grandfather","grandmother","grape","grass","grip","ground","group","growth","guide","guitar","gun","hair","haircut","hall","hammer","hand","hands","harbor","harmony","hat","head","health","heat","hill","history","hobbies","hole","holiday","home","honey","hook","hope","horn","horse","horses","hose","hospital","hot","hour","house","houses","humor","hydrant","ice","icicle","idea","impulse","income","increase","industry","ink","insect","instrument","insurance","interest","invention","iron","island","jail","jam","jar","jeans","jelly","jellyfish","jewel","join","judge","juice","jump","kettle","key","kick","kiss","kittens","kitty","knee","knife","knot","knowledge","laborer","lace","ladybug","lake","lamp","land","language","laugh","leather","leg","legs","letter","letters","lettuce","level","library","limit","line","linen","lip","liquid","loaf","lock","locket","look","loss","love","low","lumber","lunch","lunchroom","machine","magic","maid","mailbox","man","marble","mark","market","mask","mass","match","meal","measure","meat","meeting","memory","men","metal","mice","middle","milk","mind","mine","minister","mint","minute","mist","mitten","mom","money","month","moon","morning","mother","motion","mountain","mouth","move","muscle","name","nation","neck","need","needle","nerve","nest","night","noise","north","nose","note","notebook","number","nut","oatmeal","observation","ocean","offer","office","oil","orange","oranges","order","oven","page","pail","pan","pancake","paper","parcel","part","partner","party","passenger","payment","peace","pear","pen","pencil","person","pest","pet","pets","pickle","picture","pie","pies","pig","pigs","pin","pipe","pizzas","place","plane","planes","plant","plantation","plants","plastic","plate","play","playground","pleasure","plot","plough","pocket","point","poison","pollution","popcorn","porter","position","pot","potato","powder","power","price","produce","profit","property","prose","protest","pull","pump","punishment","purpose","push","quarter","quartz","queen","question","quicksand","quiet","quill","quilt","quince","quiver","rabbit","rabbits","rail","railway","rain","rainstorm","rake","range","rat","rate","ray","reaction","reading","reason","receipt","recess","record","regret","relation","religion","representative","request","respect","rest","reward","rhythm","rice","riddle","rifle","ring","rings","river","road","robin","rock","rod","roll","roof","room","root","rose","route","rub","rule","run","sack","sail","salt","sand","scale","scarecrow","scarf","scene","scent","school","science","scissors","screw","sea","seashore","seat","secretary","seed","selection","self","sense","servant","shade","shake","shame","shape","sheep","sheet","shelf","ship","shirt","shock","shoe","shoes","shop","show","side","sidewalk","sign","silk","silver","sink","sister","sisters","size","skate","skin","skirt","sky","slave","sleep","sleet","slip","slope","smash","smell","smile","smoke","snail","snails","snake","snakes","sneeze","snow","soap","society","sock","soda","sofa","son","song","songs","sort","sound","soup","space","spade","spark","spiders","sponge","spoon","spot","spring","spy","square","squirrel","stage","stamp","star","start","statement","station","steam","steel","stem","step","stew","stick","sticks","stitch","stocking","stomach","stone","stop","store","story","stove","stranger","straw","stream","street","stretch","string","structure","substance","sugar","suggestion","suit","summer","sun","support","surprise","sweater","swim","swing","system","table","tail","talk","tank","taste","tax","teaching","team","teeth","temper","tendency","tent","territory","test","texture","theory","thing","things","thought","thread","thrill","throat","throne","thumb","thunder","ticket","tiger","time","tin","title","toad","toe","toes","tomatoes","tongue","tooth","toothbrush","toothpaste","top","touch","town","toy","toys","trade","trail","train","trains","tramp","transport","tray","treatment","tree","trees","trick","trip","trouble","trousers","truck","trucks","tub","turkey","turn","twig","twist","umbrella","uncle","underwear","unit","use","vacation","value","van","vase","vegetable","veil","vein","verse","vessel","vest","view","visitor","voice","volcano","volleyball","voyage","walk","wall","war","wash","waste","watch","water","wave","waves","wax","way","wealth","weather","week","weight","wheel","whip","whistle","wilderness","wind","window","wine","wing","winter","wire","wish","wood","wool","word","work","worm","wound","wren","wrench","wrist","writer","writing","yak","yam","yard","yarn","year","yoke","zebra","zephyr","zinc","zipper","zoo"];let $=(new Z).replace_letters("lo",2);console.log($);function ee(e,t="",n=!1){if(!e)throw console.error(t),"Wrong: "+t;n&&console.log("Ok: "+t)}class te{constructor(e,t){this.content=null,this.left=null,this.right=null,this.parent=null,this.left=e,null!=e&&(this.left.parent=this),this.right=t,null!=t&&(this.right.parent=this)}is_left_child(){return null!=this.parent&&this.parent.left==this}is_right_child(){return null!=this.parent&&this.parent.right==this}number_of_nodes(){return 1+(null!=this.left?this.left.number_of_nodes():0)+(null!=this.right?this.right.number_of_nodes():0)}number_of_inner_nodes(){return this.is_leave()?0:1+(null!=this.left?this.left.number_of_inner_nodes():0)+(null!=this.right?this.right.number_of_inner_nodes():0)}source_string(){let e=[];return this.source_string_writer(e),e.join("")}source_string_writer(e){this.is_leave()?e.push(this.content):(e.push("("),null!=this.left&&this.left.source_string_writer(e),e.push(this.content),null!=this.right&&this.right.source_string_writer(e),e.push(")"))}clone(){let e=null!=this.left?this.left.clone():this.left,t=null!=this.right?this.right.clone():this.right,n=new te(e,t);return n.content=null==this.content?null:this.content.clone(),n}push_leaves(){null!=this.left?this.left.push_leaves():(this.left=new te(null,null),this.left.parent=this),null!=this.right?this.right.push_leaves():(this.right=new te(null,null),this.right.parent=this)}as_in_order_array(){let e=[];return this.as_in_order_array_writer(e),e}as_in_order_array_writer(e){null!=this.left&&this.left.as_in_order_array_writer(e),e.push(this),null!=this.right&&this.right.as_in_order_array_writer(e)}set_all_operator_values(e){let t=this.as_in_order_array();t=t.filter((e=>!e.is_leave())),t.forEach((t=>t.content=e))}set_all_leave_values(e){let t=this.as_in_order_array();t=t.filter((e=>e.is_leave())),t.forEach((t=>t.content=e))}is_leave(){return null==this.left&&null==this.right}call_by_value_order(){let e=[];return this.call_by_value_order_writer(e),e}call_by_value_order_writer(e){this.is_leave()||(null!=this.left&&this.left.call_by_value_order_writer(e),null!=this.right&&this.right.call_by_value_order_writer(e)),e.push(this)}has_child(e){return this===e||!(null==this.left||!this.left.has_child(e))||!(null==this.right||!this.right.has_child(e))}}function ne(e){let t=[];return re(e,t),t}function re(e,t){if(0!=e)if(1!=e)for(let n=0;n<e;n++){let r=e-n-1,i=[],s=[];re(n,i),re(r,s);for(let e=0;e<i.length;e++)for(let n=0;n<s.length;n++)t.push(new te(i[e],s[n]))}else t.push(new te(null,null));else t.push(null)}!function(){let e=[];e=ne(1),ee(1==e.length,"Catalan number 1 = 1"),e=ne(2),ee(2==e.length,"Catalan number 2 = 2"),e=ne(3),ee(5==e.length,"Catalan number 3 = 5"),e=ne(4),ee(14==e.length,"Catalan number 4 = 14"),e=ne(5),ee(42==e.length,"Catalan number"),e=ne(6),ee(132==e.length,"Catalan number"),e=ne(7),ee(429==e.length,"Catalan number"),e=ne(8),ee(1430==e.length,"Catalan number"),e=ne(9),ee(4862==e.length,"Incorrect Catalan number"),console.log("Catalan numbers seem ok.")}();class ie{constructor(e){this.values=[],this.values=new Array(e).fill(null)}do_matching(e,t,n){let r=this.clone(),i=e.clone(),s=!1,a=!1;for(let o=0;o<t.length;o++){let l=this.values[t[o]],u=e.values[n[o]];if(l!==u)if(null===l)r.values[t[o]]=u,s=!0;else{if(null!==u)return{matches:!1,left:null,has_left_variable_replacements:!1,right:null,has_right_variable_replacements:!1};i.values[n[o]]=l,a=!0}}return{matches:!0,left:r,has_left_variable_replacements:s,right:i,has_right_variable_replacements:a}}clone(){let e=new ie(this.number_of_variables),t=[];for(let e of this.values)t.push(e);return e.values=t,e}do_print(){console.log(this.values.join(", "))}}class se{static Empty_Logical_Results(e){let t=new se(e);return t.rows=[],t}static Logical_Results_FROM_SOLUTION_ARRAY(e,t){let n=se.Empty_Logical_Results(e);for(let e of t)n.add_solution_array(e);return n}constructor(e){this.rows=[],this.rows.push(new ie(e))}has_contradiction(){return 0===this.rows.length}add_solution_array(e){let t=new ie(this.number_of_variables);t.values=[...e],this.rows.push(t)}unify_results(e,t,n){1==this.rows.length&&null==this.rows[0]&&console.log("stop");let r=[],i=[],s=[],a=[],o=0;for(let l of this.rows){o++;let u=0;for(let c of e.rows){u++;let e=null;try{e=l.do_matching(c,t,n)}catch(r){throw e=l.do_matching(c,t,n),"something is wrong"}e.matches&&(s.includes(o)||(r.push(e.left),e.has_left_variable_replacements||s.push(o)),a.includes(u)||(i.push(e.right),e.has_right_variable_replacements||e.has_right_variable_replacements||a.push(u)))}}this.rows=r,e.rows=i}do_print(){for(let e of this.rows)e.do_print()}solutions(){return this.rows}random_result_for_column(e){let t=new se(this.number_of_variables);return t.rows=[this.random_row_for_random_column_value(2)],t}random_row_for_random_column_value(e){let t=A(this.elements_of_column_with_unique_results(e)),n=A(this.rows_with_value_matching(e,t));return this.rows[n]}elements_of_column_with_unique_results(e){let t=[];return this.rows.forEach((n=>{let r=n.values[e];t.includes(r)||t.push(r)})),t}rows_with_value_matching(e,t){let n=[];for(let r=0;r<this.rows.length;r++)this.rows[r].values[e]==t&&n.push(r);return n}}function ae(e,t){let n=new se(e);n.rows=[];for(let r of t){let t=new ie(e);t.values=[];for(let e in r){let n=r[e];t.values.push(n)}n.rows.push(t)}return n}var oe;!function(){let e,t;e=ae(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),t=ae(2,[{x:2,y:3}]),e.unify_results(t,[1,2],[0,1]),ee(2==e.rows.length&&1==t.rows.length,"Unify 1 (all right): with possibly double entries right "+e.rows.length+" -- "+t.rows.length),e=ae(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),t=ae(2,[{x:2,y:3},{x:3,y:3}]),e.unify_results(t,[1,2],[0,1]),ee(4==e.rows.length&&2==t.rows.length,"Unify 2 (all right): with possibly double entries right "+e.rows.length+" -- "+t.rows.length),e=ae(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),t=ae(2,[{x:2,y:3}]),e.unify_results(t,[1],[0]),ee(2==e.rows.length&&1==t.rows.length,"Unify 3 (only subset right): with possibly double entries right "+e.rows.length+" -- "+t.rows.length),t=ae(6,[{x:2,y:3}]),e=ae(6,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),t=ae(6,[{x:2}]),e.unify_results(t,[1],[0]),ee(2==e.rows.length&&1==t.rows.length,"Unify 4 (on unbound variable left) "+e.rows.length+" -- "+t.rows.length),ee(2===e.rows[0].values[1],"Unify 3 (unbounded becomes bounded) "+e.rows.length+" -- "+t.rows.length),e=ae(2,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),t=ae(2,[{x:2},{x:3}]),e.unify_results(t,[1],[0]),ee(4===e.rows.length&&2==t.rows.length,"Unify 5 (multiple variable bindings) "+e.rows.length+" -- "+t.rows.length),ee(2===e.rows[0].values[1],"Unify 5 (multiple variable bindings - unbounded variable is now bounded"),e=ae(2,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),t=ae(1,[{x:null}]),e.unify_results(t,[1],[0]),ee(2==e.rows.length&&1==t.rows.length,"Unify 6 (unifying unbounded variables) "+e.rows.length+" -- "+t.rows.length),ee(null===e.rows[0].values[1],"Unify 6 (multiple variable bindings - unbounded variable is now bounded - 1st"),ee(null===t.rows[0].values[0],"Unify 6 (multiple variable bindings - unbounded variable is now bounded - 2nd"),e=new se(3),t=ae(1,[{x:1},{x:2},{x:3}]),e.unify_results(t,[1],[0]),ee(3==e.rows.length&&3==t.rows.length,"Unify 7 "+e.rows.length+" -- "+t.rows.length),e=function(){let e=new se(6);e.rows=[];for(let t of[[1,2,3,4,5,6],[1,3,3,4,5,6]]){let n=new ie(6);n.values=[];for(let e of t)n.values.push(e);e.rows.push(n)}return e}(),t=new se(3),e.unify_results(t,[1],[0]),ee(2==e.rows.length&&2==t.rows.length,"Unify 8 "+e.rows.length+" -- "+t.rows.length),ee(2===e.rows[0].values[1],"Unify 8 (multiple variable bindings - unbounded variable is now bounded - 1st"),ee(3===e.rows[1].values[1],"Unify 8 (multiple variable bindings - unbounded variable is now bounded - 2nd")}(),console.log("ok, logic programming seems to work."),(oe=Nof1).SET_SEED=j,oe.new_random_integer=T,oe.BROWSER_EXPERIMENT=function(e){let t=new Q,n=e(t);j(n.seed);let r=n.measurement(t),i=function(e){let t=Y.from_layout(e.layout),n=new z(t,e.repetitions),r=new I(e.experiment_name,!1,n,t,e.repetitions,e.measurement,e.task_configuration),i=new F(e.training_configuration);return r.create_code_all_experiment_automatas({seed:e.seed,introduction_texts:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_output,training_configuration:i,pre_run_experiment_output:e.pre_run_experiment_output,finish_texts:e.finish_pages,measurement:e.measurement,finish_function:e.finish_function})}({experiment_name:n.experiment_name,seed:n.seed,introduction_pages:n.introduction_pages,post_questionnaire:n.post_questionnaire,pre_run_training_output:n.pre_run_training_instructions,training_configuration:n.training_configuration,pre_run_experiment_output:n.pre_run_experiment_instructions,finish_pages:n.finish_pages,layout:n.layout,repetitions:n.repetitions,task_configuration:n.task_configuration,measurement:r,finish_function:e=>{document.removeEventListener("keydown",s),function(e,t){const n=new Blob(t,{type:"application/ssc"}),r=window.document.createElement("a");r.href=window.URL.createObjectURL(n),r.download="experimentdata.csv",document.body.appendChild(r),r.click(),document.body.removeChild(r)}(0,e.generate_csv_data())}}),s=e=>{let t=(r="","Alt"==(n=e).key&&n.ctrlKey?"Alt+Ctrl":"Control"==n.key&&n.altKey?"Ctrl+Alt":(r+=n.altKey?"+Alt":"",r+=n.ctrlKey?"+Control":"","Alt"==n.key?"Alt":""+n.key+r));var n,r;i.input(t)};document.addEventListener("keydown",s,!1),i.set_active()},oe.text_input_experiment=function(e){return new q(e)},oe.new_random_integer=T,oe.Time_to_finish=function(e){return t=>new y(e(t))},oe.Time_to_finish_with_penality=function(e,t){return n=>new x(e(n),t)},oe.Reaction_time=function(e){return t=>new b(e(t))},oe.Reaction_time_with_penalty=function(e,t){return n=>new v(e(n),t)},oe.keys=function(e){return t=>new E(e,t)},oe.Nouns=Z,oe.Verbs=class{constructor(){this.words=["drip","touch","trouble","start","communicate","jog","order","strip","coach","relax","vanish","connect","shock","spray","radiate","spill","hate","rinse","seal","kiss","ask","train","handle","replace","cover","plan","jump","lick","jail","gather","comb","knit","drain","meddle","alert","ask","train","handle","replace","cover","plan","jump","lick","jail","gather","comb","knit","drain","meddle","alert","instruct","arrive","smash","worry","knock","satisfy","fade","time","record","hug","film","sip","request","miss","own","hook","unfasten","pop","drown","gaze","escape","hang","boil","discover","count","work","flower","precede","reproduce","blush","punish","hope","destroy","call","use","surprise","muddle","notice","confess","carry","lie","spell","heap","fasten","fire","flash","carve","accept","like","crush","rock","kill","joke","attempt","protect","concern","suit","appear","agree","sail","shrug","trace","rot","pretend","stir","chop","name","slow","injure","program","man","plant","examine","reply","face","promise","observe","copy","retire","mine","moan","attend","admire","command","learn","answer","prepare","impress","argue","whine","consist","interest","branch","bubble","realise","melt","walk","shop","squeeze","hum","tempt","spoil","remove","race","doubt","step","judge","desert","tap","afford","part","deliver","float","apologise","switch","share","phone","applaud","print","note","wreck","scream","follow","blink","arrange","sign","guarantee","stain","wash","lighten","tame","change","laugh","brake","tick","hammer","mate","mourn","smell","close","invite","rain","warm","occur","puncture","memorise","slap","terrify","check","delight","bolt","cross","settle","spare","type","guard","back","bore","poke","preach","fear","grin","approve","level","wave","pedal","stitch","obey","compare","ski","paint","serve","consider","bare","shelter","risk","bat","rub","double","mix","appreciate","disapprove","exercise","remember","smile","invent","enjoy","clear","cry","dress","flow","skip","empty","decorate","soak","suffer","produce","place","dream","guess","whip","burn","interfere","jam","trick","lock","talk","queue","tickle","complete","stuff","sound","confuse","introduce","amuse","paste","travel","number","water","scrape","correct","borrow","behave","snore","wink","excite","attract","mess up","reflect","camp","mark","tumble","soothe","point","disagree","provide","suspect","license","return","sparkle","buzz","juggle","continue","list","cure","nest","post","try","preserve","offend","challenge","develop","spark","enter","cause","identify","curl","frighten","tremble","peck","describe","squeak","remind","rob","sneeze","turn","listen","frame","rely","last","twist","reduce","tie","grease","welcome","rush","charge","dance","refuse","expect","embarrass","unite","disappear","ban","grate","bomb","pat","bless","hand","reign","strengthen","overflow","balance","announce","squash","pick","regret","unlock","spot","wrap","waste","remain","drop","scrub","flap","dislike","dare","x-ray","compete","repair","pour","harass","join","multiply","chase","sack","moor","fold","tug","receive","flood","prick","kick","fail","expand","fill","sin","wonder","decay","subtract","fax","signal","shade","curve","greet","clip","irritate","tip","depend","want","beg","file","earn","recognise","supply","dry","exist","collect","add","form","drum","deceive","zoom","march","annoy","murder","watch","heat","fry","dust","bleach","separate","bury","saw","polish","wriggle","stay","wish","brush","trip","weigh","colour","test","blot","open","itch","zip","wobble","paddle","cheer","extend","nod","yell","fix","dam","fetch","transport","visit","found","load","interrupt","long","tour","suppose","stretch","store","raise","pray","pine","divide","happen","punch","bang","stamp","yawn","disarm","question","obtain","haunt","admit","stop","ruin","influence","scold","pass","whisper","groan","succeed","need","mug","analyse","telephone","rescue","wipe","marry","advise","pump","explode","fence","crawl","bow","improve","thank","attack","manage","support","reject","tow","cheat","perform","educate","warn","grab","stroke","drag","move","peel","roll","knot","unpack","nail","possess","trade","pack","fool","kneel","blind","prefer","object","encourage","match","inform","bounce","wander","boast","beam","fit","present","squeal","treat","repeat","launch","fancy","label","explain","increase","land","choke","excuse","wrestle","screw","report","measure","sigh","harm","scratch","cough","imagine","mend","save","scatter","breathe","decide","rule","avoid","calculate","box","peep","detect","contain","grip","release","crack","offer","undress","whirl","permit","live","force","sprout","entertain","pinch","glue","love","hunt","scare","push","coil","untidy","bruise","wait","damage","sniff","trust","belong","crash","attach","pause","heal","battle","pull","plug","end","snow","bake","bump","deserve","intend","prevent","hurry","practise","play","reach","clap","delay","chew","matter","book","complain","milk","care","concentrate","strap","tire","cycle","trot","taste","scribble","hover","look","ignore","suck","hop","trap","shave","glow","owe","guide","press","head","whistle","snatch","rhyme","please","scorch","suspend","wail","smoke","thaw","arrest","stare","slip","clean","claim","suggest","surround","bathe","steer","search","park","inject","employ","shiver","tease","rejoice","allow","include","help"]}},oe.create_catalan_graphs=ne,oe.Logical_Results=se,oe.array_of_rows_to_logical_result=ae,oe.free_text=function(e,t){return new p(e,t)},oe.alternatives=function(e,t,n){return new _(e,t,n)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,