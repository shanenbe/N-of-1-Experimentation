(()=>{var t={195:function(t,e,n){var r;!function(o,i,s){var a,u=256,c=s.pow(u,6),l=s.pow(2,52),p=2*l,_=u-1;function h(t,e,n){function r(){for(var t=y.g(6),e=c,n=0;t<l;)t=(t+n)*u,e*=u,n=y.g(1);for(;p<=t;)t/=2,e/=2,n>>>=1;return(t+n)/e}var _=[],h=m(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,g(i)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(u):(t=new Uint8Array(u),(o.crypto||o.msCrypto).getRandomValues(t)),g(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,g(i)]}}():t,3),_),y=new f(_);return r.int32=function(){return 0|y.g(4)},r.quick=function(){return y.g(4)/4294967296},r.double=r,m(g(y.S),i),(e.pass||n||function(t,e,n,r){return r&&(r.S&&d(r,y),t.state=function(){return d(y,{})}),n?(s.random=t,e):t})(r,h,"global"in e?e.global:this==s,e.state)}function f(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<u;)s[o]=o++;for(o=0;o<u;o++)s[o]=s[i=_&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=_&o+1],n=n*u+s[_&(s[o]=s[i=_&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(u)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){for(var n,r=t+"",o=0;o<r.length;)e[_&o]=_&(n^=19*e[_&o])+r.charCodeAt(o++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(m(s.random(),i),t.exports){t.exports=h;try{a=n(234)}catch(h){}}else void 0===(r=function(){return h}.call(e,n,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},234:()=>{}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(195),e=n.n(t);function r(t,e){return-1!=t.indexOf(e)}var o,i=function(){function t(t){this.set_active_function=function(){},this.forwarder_name=t}return t.prototype.input=function(t){this.automata.input(t)},t.prototype.add_activation_function=function(t){},t.prototype.set_active=function(){},t}(),s=function(){function t(t){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=t.start,this.states=t.states;for(var e=0;e<this.states.length;e++)this.transitions.push([]);for(var n=0,r=t.transitions;n<r.length;n++){var o=r[n];null==this.transitions&&console.log("Something is wrong here"),null!=this.transitions&&null!=o.from||console.log("Something is wrong here"),null==this.transitions[o.from]&&console.log("Something is wrong here"),this.transitions[o.from].push(o)}this.init_function=t.init_function,this.end_states=t.end_states}return t.prototype.input=function(t){var e=this.first_match(t),n=this.current_state;null!=e&&(this.current_state=e.next_state,e.action(n,t,this.current_state))},t.prototype.start=function(){this.current_state=this.start_state},t.prototype.first_match=function(t){for(var e=0;e<this.transitions[this.current_state].length;e++)if(this.transitions[this.current_state][e].accepts(t))return this.transitions[this.current_state][e];return null},t.prototype.initialize=function(){this.current_state=this.start_state,this.init_function()},t.prototype.add_finish_action=function(t){for(var e=0,n=this.transitions;e<n.length;e++)for(var r=n[e],o=function(e){if(i.is_transition_to_end(e)){var n=e.action;e.action=function(e,r,o){n(e,r,o),t()}}},i=this,s=0,a=r;s<a.length;s++)o(a[s])},t.prototype.is_transition_to_end=function(t){return r(this.end_states,t.next_state)},t.prototype.add_action_to_transitions=function(t,e){for(var n=0,r=this.transitions;n<r.length;n++)for(var o=function(n){if(t(n)){var r=n.action;n.action=function(t,n,o){r(t,n,o),e()}}},i=0,s=r[n];i<s.length;i++)o(s[i])},t}(),a=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),u=function(t){function e(e,n,r,o){var i=t.call(this,e)||this;return i.pre_run_instructions=r,i.post_run_instructions=o,i.measurement=n,i.automata=i.create_automata(),i.automata.initialize(),i}return a(e,t),e.prototype.set_active=function(){this.show_intro()},e.prototype.create_automata=function(){return new s(this.automata_configurator())},e.prototype.output_writer=function(){return this.measurement.output_writer()},e.prototype.show_intro=function(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()},e.prototype.empty_screen_and_show_instructions=function(t){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==t||null==t?console.log("something is strange"):t()},e}(i),c=function(t,e,n,r,o){this.states=t,this.start=e,this.init_function=n,this.transitions=r,this.end_states=o},l=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(){},_=(function(t){function e(e){var n=t.call(this)||this;return n.accepted_strings=e,n}l(e,t),e.prototype.accepts=function(t){return r(this.accepted_strings,t)}}(p),function(t){function e(e){var n=t.call(this)||this;return n.acceptor_function=e,n}return l(e,t),e.prototype.accepts=function(t){return this.acceptor_function(t)},e}(p));!function(t){function e(){return null!==t&&t.apply(this,arguments)||this}l(e,t),e.prototype.accepts=function(t){return!0}}(p);var h=function(){function t(t,e,n,r){this.from=t,this.acceptor=e,this.next_state=n,this.action=r}return t.prototype.is_valid_input=function(t){return this.acceptor.accepts(t)},t.prototype.accepts=function(t){return this.acceptor.accepts(t)},t}();function f(t,e,n,r){return new h(t,new _(e),n,(function(t,e,n){return r(e)}))}function d(t){return{to:function(e){return{on:function(n){return{if:function(r){return{do:function(o){return f(t,(function(t){return t==n&&r(t)}),e,o)}}},do:function(r){return f(t,(function(t){return t==n}),e,r)}}},on_any:function(n){return{if:function(o){return{do:function(i){return f(t,(function(t){return r(n,t)&&o(t)}),e,i)}}},do:function(o){return f(t,(function(t){return r(n,t)}),e,o)}}}}}}}var m,g=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),y=function(){function t(t,e){this.answer=null,this.variable_name=t,this.question_text=e}return t.prototype.store_answer=function(){var t=document.getElementById(this.variable_name);this.answer=t.value},t}(),w=function(t){function e(e,n,r){var o=t.call(this,e,n)||this;return o.alternatives=r,o}return g(e,t),e.prototype.input_html=function(){var t='<select id="'+this.variable_name+'">';t+="<option disabled selected value> -- select an option -- </option>";var e=0;return this.alternatives.forEach((function(n){return t+="<option value="+e+++">"+n+"</option>"})),t+="</select>"},e.prototype.store_answer=function(){var t=document.getElementById(this.variable_name);this.answer=this.alternatives[t.value]},e}(y),v=(function(t){function e(e){return t.call(this,null,e)||this}g(e,t),e.prototype.html_string=function(){return"<p>We have one question to you.</p>"},e.prototype.input_html=function(){return'<input type="text" id="'+this.variable_name+'">'}}(y),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return g(e,t),e.prototype.html_string=function(){},e.prototype.input_html=function(){return'<input type="text" id="'+this.variable_name+'">'},e}(y)),b=function(t){function e(e,n){var r=t.call(this,"Questionnaire",n,(function(){return n.output_writer().print_html_on_stage("Please, answer the following questions.<br>")}),(function(){return n.output_writer().print_html_on_stage("Thank you for answering the questions.")}))||this;return r.current_question_number=-1,r.questions=e,r}return g(e,t),e.prototype.automata_configurator=function(){return new c([0,1,2,3,4],0,(function(){}),this.transitions(),[4])},e.prototype.transitions=function(){var t=this;return[d(0).to(4).on("DONE").if((function(t){return!0})).do((function(e){t.add_result_to_question(),console.log("dummy")}))]},e.prototype.show_intro=function(){var e=this;t.prototype.show_intro.call(this);var n=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(n),document.getElementById("DONE").onclick=function(){return e.input("DONE")}},e.prototype.show_outro=function(){},e.prototype.create_questionnaire_html_string=function(){var t="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((function(e){return t+="<tr><td>"+e.question_text+"</td><td>"+e.input_html()+"</td></tr>"})),t+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>"},e.prototype.add_result_to_question=function(){for(var t=0,e=this.questions;t<e.length;t++)e[t].store_answer()},e}(u),k=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t[t.STRING=1]="STRING",t[t.NUMBER=2]="NUMBER"}(m||(m={}));var x=function(){function t(){}return t.prototype.convert_string_to_html_string=function(t){return function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(t)},t.prototype.string_page_command=function(t){var e=this;return function(){return e.print_string_on_stage(t)}},t.prototype.stage_string_pages_commands=function(t){for(var e=[],n=0,r=t;n<r.length;n++){var o=r[n];e.push(this.string_page_command(o))}return e},t.prototype.get_given_answer=function(t){return t},t.prototype.print_on_input_response=function(t){},t.prototype.set_focus_on_input=function(){},t.prototype.clear_all=function(){this.clear_state(),this.clear_stage()},t}(),E=function(){function t(t){this.input_type=t}return t.prototype.accepted_responses=function(){return this.input_type.accepted_responses()},t.prototype.given_answer=function(t){return this.input_type.given_answer(t)},t.prototype.start_measurement=function(t){this.start_time=(new Date).getTime().valueOf(),t.print_task()},t.prototype.stop_measurement=function(t,e){var n=(new Date).getTime().valueOf();e.given_answer=this.input_type.get_given_answer(t),e.required_milliseconds=n-this.start_time,e.do_print_after_task_information()},t.prototype.incorrect_response=function(t,e){var n=(new Date).getTime().valueOf(),r=e.experiment_definition.measurement.get_given_answer(t);e.invalid_answers.push([r,n-this.start_time]),e.do_print_error_message(this.input_type.get_given_answer(t))},t.prototype.output_writer=function(){return this.input_type.output_writer},t.prototype.get_given_answer=function(t){return this.input_type.get_given_answer(t)},t.prototype.demands_penalty=function(){return!1},t.prototype.penalty_is_over=function(){return!0},t}(),O=function(t){function e(e){return t.call(this,e)||this}return k(e,t),e}(E),j=function(t){function e(e,n){var r=t.call(this,e)||this;return r.penalty_started=!1,r.penalty_start_point=null,r.penalty_miliseconds=1e3*n,r}return k(e,t),e.prototype.demands_penalty=function(){return!0},e.prototype.incorrect_response=function(e,n){t.prototype.incorrect_response.call(this,e,n),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),n.do_print_error_message(this.input_type.get_given_answer(e))},e.prototype.delete_penalty=function(){this.penalty_started=!1,this.penalty_start_point=null},e.prototype.penalty_is_over=function(){var t=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||t>=this.penalty_miliseconds},e.prototype.start_measurement=function(e){t.prototype.start_measurement.call(this,e),this.delete_penalty()},e}(E),q=function(t){function e(e){return t.call(this,e)||this}return k(e,t),e}(E),C=function(t){function e(e,n){var r=t.call(this,e)||this;return r.penalty_started=!1,r.penalty_start_point=null,r.penalty_miliseconds=1e3*n,r}return k(e,t),e.prototype.demands_penalty=function(){return!0},e.prototype.incorrect_response=function(e,n){t.prototype.incorrect_response.call(this,e,n),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),n.do_print_error_message(this.input_type.get_given_answer(e))},e.prototype.delete_penalty=function(){this.penalty_started=!1,this.penalty_start_point=null},e.prototype.penalty_is_over=function(){var t=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||t>=this.penalty_miliseconds},e.prototype.start_measurement=function(e){t.prototype.start_measurement.call(this,e),this.delete_penalty()},e}(q),T=function(){function t(t){this.output_writer=t}return t.prototype.print_input_request=function(){this.output_writer.ask_for_input()},t.prototype.get_given_answer=function(t){return this.output_writer.get_given_answer(t)},t}(),A=function(t){function e(e,n){var r=t.call(this,n)||this;return r.accepted_keys=e,r}return k(e,t),e.prototype.accepted_responses=function(){return this.accepted_keys},e.prototype.given_answer=function(t){return t},e.prototype.print_input_request=function(){},e.prototype.get_given_answer=function(t){return t},e}(T),S=function(t){function e(e){return t.call(this,e)||this}return k(e,t),e.prototype.accepted_responses=function(){return["Enter"]},e.prototype.given_answer=function(t){},e.prototype.print_input_request=function(){this.output_writer.ask_for_input()},e}(T),P=(function(t){function e(e,n,r){return t.call(this,e)||this}k(e,t),e.prototype.accepted_responses=function(){return["Enter"]},e.prototype.given_answer=function(t){},e.prototype.print_input_request=function(){this.output_writer.ask_for_input()}}(T),new(function(){function t(){e()("1234567890",{global:!0})}return t.prototype.new_random_integer=function(t){return Math.trunc(t*Math.random())},t.prototype.set_seed=function(t){e()(t,{global:!0})},t}()));function R(t){P.set_seed(t)}function U(t){return P.new_random_integer(t)}function M(t){return t[U(t.length)]}function z(t){for(;;){var e=String.fromCharCode(97+U(26));if(!t.includes(e))return e}}e()();var I=function(){function t(t,e,n){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.has_pre_task_description=!1,this.do_print_task=function(){throw new Error("Method not implemented.")},this.do_print_pre_task=function(){throw new Error("Method not implemented.")},this.do_print_error_message=function(){throw new Error("Method not implemented.")},this.accepts_answer_function=function(t){return!0},this.do_print_after_task_information=function(){throw new Error("Method not implemented.")},this.treatment_combination=t,this.experiment_definition=e}return t.prototype.accepts_answer=function(t){var e=this.experiment_definition.measurement.get_given_answer(t);return this.accepts_answer_function(e)},t.prototype.next_task=function(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null},t.prototype.html_string_with_cmd=function(t,e){},t.prototype.html_node_with_cmd=function(t,e){},t.prototype.after_task_string_constructor=function(t){},t.prototype.print_task=function(){this.do_print_task(),this.print_input_request()},t.prototype.print_pre_task_info=function(){this.do_print_pre_task()},t.prototype.print_input_request=function(){this.experiment_definition.measurement.input_type.print_input_request()},t.prototype.treatment_value=function(t){for(var e=0,n=this.treatment_combination.treatment_combination;e<n.length;e++){var r=n[e];if(r.variable.name===t)return r.value}throw"Unknown treatment: "+t},t.prototype.set_computed_variable_value=function(t,e){for(var n=0,r=this.treatment_combination.treatment_combination;n<r.length;n++){var o=r[n];if(o.variable.name===t)return void(o.value=e)}throw"Unknown treatment: "+t},t}(),L=function(){function t(t,e){this.variables=t,this.repetitions=e}return t.prototype.clone=function(){return new t(this.variables,this.repetitions)},t.prototype.create_treatment_combinations=function(){for(var t=[],e=0;e<this.repetitions;e++)t=t.concat(this.variables.create_treatment_combinations());return t},t.prototype.create_tasks=function(t){for(var e=[],n=0,r=this.create_treatment_combinations();n<r.length;n++){var o=r[n],i=new I(o.clone(),t,"");try{t.experiment_definition_task_creator(i)}catch(e){console.log("halt"),t.experiment_definition_task_creator(i)}i.is_training=t.is_training,e.push(i)}return function(t){for(var e=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}([],t,!0),n=[];e.length>0;)n.push(e.splice(U(e.length),1)[0]);return n}(e)},t.prototype.get_variable_named=function(t){return this.variables.get_variable_named(t)},t}(),D=function(){function t(t,e,n,r,o,i,s){this.questionnaires=[],this.tasks=[],this.experiment_name=t,this.is_training=e,this.template={experiment_name:t,variables:r,repetitions:o,task_creator:s},this.treatments_combinator=n,this.variables=r,this.measurement=i,this.experiment_definition_task_creator=s}return t.prototype.init_experiment=function(t){this.tasks=this.treatments_combinator.create_tasks(this)},t.prototype.all_independent_variables=function(){return this.variables.independent_variables},t.prototype.generate_csv_data=function(){for(var t=[],e=0,n=this.questionnaires;e<n.length;e++)for(var r=0,o=n[e].questions;r<o.length;r++){var i=o[r];t.push('"'+i.variable_name+'";')}this.variables.print_to_array(t),t.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(var s=0,a=this.tasks;s<a.length;s++){for(var u=a[s],c=0,l=this.questionnaires;c<l.length;c++)for(var p=0,_=l[c].questions;p<_.length;p++)i=_[p],t.push('"'+i.answer+'";');for(var h=0,f=u.treatment_combination.treatment_combination;h<f.length;h++){var d=f[h];t.push(d.value+";")}t.push(u.invalid_answers.length+1+";"),t.push(u.expected_answer+";"),t.push(u.given_answer+";"),t.push((u.given_answer==u.expected_answer)+";"),t.push(u.required_milliseconds+";"),u.invalid_answers.forEach((function(e){return t.push(e[0]+";"+e[1]+";")})),t.push("\n")}return t},t}(),N=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),B=function(t){function e(e,n,r){var o=t.call(this,e,r,n[0],n[n.length-1])||this;return o.current_page_number=-1,o.pages=n,o.create_automata(),o}return N(e,t),e.prototype.set_page_index=function(t){this.current_page_number=t,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);var e="<hr>";t>0&&(e+="[&#8592] = previous page"),t<this.pages.length-1&&(e+=("<hr>"!=e?"<br>":"")+"[&#8594] = next page"),t==this.pages.length-1&&(e+=("<hr>"!=e?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(e)},e.prototype.set_active=function(){t.prototype.set_active.call(this)},e.prototype.show_intro=function(){this.set_page_index(0)},e.prototype.show_outro=function(){},e.prototype.automata_configurator=function(){return new c([0,1],0,(function(){}),this.transitions(),[1])},e.prototype.transitions=function(){var t=this;return[d(0).to(0).on("ArrowRight").if((function(e){return t.current_page_number<t.pages.length-1})).do((function(e){t.set_page_index(++t.current_page_number)})),d(0).to(0).on("ArrowLeft").if((function(e){return t.current_page_number>0})).do((function(e){t.set_page_index(--t.current_page_number)})),d(0).to(1).on("Enter").if((function(e){return t.current_page_number>=t.pages.length-1})).do((function(t){}))]},e}(u),G=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),F=function(t){function e(e){var n,r,o,i=t.call(this,"Default Sequential Forwarder Forwader")||this;i.current_forwarder_index=0,i.forwarders=e;for(var a=0,u=e;a<u.length;a++)u[a].automata.add_finish_action((function(){return i.automata.input("switch to next state")}));return i.automata=(n=[0,1],r=function(){},o=[d(0).to(0).on("switch to next state").if((function(){return i.current_forwarder_index<i.forwarders.length-1})).do((function(){i.current_forwarder_index++,i.current_forwarder().set_active()})),d(0).to(1).on("switch to next state").if((function(){return i.current_forwarder_index==i.forwarders.length-1})).do((function(){}))],new s(new c(n,0,r,o,[1]))),i.automata.initialize(),i}return G(e,t),e.prototype.input=function(t){this.forwarders[this.current_forwarder_index].input(t)},e.prototype.input_sequence=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];this.input(r)}},e.prototype.current_forwarder=function(){return this.forwarders[this.current_forwarder_index]},e.prototype.set_active=function(){t.prototype.set_active.call(this),this.current_forwarder().set_active()},e}(i),K=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),H=function(t){function e(e,n,r,o,i){var s=t.call(this,e,i,n,r)||this;return s.current_page_index=-1,s.experiment_definition=o,s}return K(e,t),e.prototype.show_intro=function(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)},e.prototype.show_outro=function(){this.empty_screen_and_show_instructions(this.post_run_instructions)},e.prototype.automata_configurator=function(){return new c([0,1,2,4,5,6],0,(function(){}),this.transitions(),[6])},e.prototype.current_task=function(){return this.experiment_definition.tasks[this.current_page_index]},e.prototype.automata_configuration=function(){return new c([0,1,2,4,5,6],0,(function(){}),this.transitions(),[6])},e.prototype.transitions=function(){var t=this;return[d(0).to(2).on("Enter").if((function(e){return!t.first_task().has_pre_task_description})).do((function(e){t.set_experiment_index(0),t.measurement.start_measurement(t.current_task())})),d(0).to(1).on("Enter").if((function(e){return t.first_task().has_pre_task_description})).do((function(e){t.set_experiment_index(0),t.show_pre_task_info()})),d(0).to(5).on("Delete").do((function(e){t.show_outro()})),d(1).to(2).on("Enter").do((function(e){t.measurement.start_measurement(t.current_task())})),d(2).to(2).on_any(this.measurement.accepted_responses()).if((function(e){return!t.current_task().accepts_answer(e)&&!t.measurement.demands_penalty()})).do((function(e){t.measurement.incorrect_response(e,t.current_task())})),d(2).to(5).on("?+Control").if((function(t){return!0})).do((function(e){t.measurement.stop_measurement(e,t.current_task()),t.show_outro()})),d(2).to(4).on_any(this.measurement.accepted_responses()).if((function(e){return t.current_task().accepts_answer(e)&&t.current_page_index<t.experiment_definition.tasks.length-1})).do((function(e){t.measurement.stop_measurement(e,t.current_task())})),d(2).to(3).on_any(this.measurement.accepted_responses()).if((function(e){return!t.current_task().accepts_answer(e)&&t.measurement.demands_penalty()})).do((function(e){t.measurement.incorrect_response(e,t.current_task())})),d(3).to(2).on("Enter").if((function(e){return t.measurement.penalty_is_over()})).do((function(e){t.measurement.start_measurement(t.current_task())})),d(4).to(1).on("Enter").if((function(e){return t.current_page_index<t.experiment_definition.tasks.length-1&&t.next_task().has_pre_task_description})).do((function(e){t.inc_current_experiment(),t.show_pre_task_info()})),d(4).to(2).on("Enter").if((function(e){return t.current_page_index<t.experiment_definition.tasks.length-1&&!t.next_task().has_pre_task_description})).do((function(e){t.measurement.start_measurement(t.current_task())})),d(2).to(5).on_any(this.measurement.accepted_responses()).if((function(e){return t.current_task().accepts_answer(e)&&t.current_page_index==t.experiment_definition.tasks.length-1})).do((function(e){t.measurement.stop_measurement(e,t.current_task()),t.show_outro()})),d(5).to(6).on("Enter").do((function(t){}))]},e.prototype.set_experiment_index=function(t){this.current_page_index=t,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)},e.prototype.inc_current_experiment=function(){this.set_experiment_index(++this.current_page_index)},e.prototype.init_experiment=function(){this.experiment_definition.init_experiment(!1)},e.prototype.show_pre_task_info=function(){this.output_writer().clear_stage(),this.output_writer().clear_error(),this.current_task().print_pre_task_info()},e.prototype.next_task=function(){return this.experiment_definition.tasks[this.current_page_index+1]},e.prototype.first_task=function(){return this.experiment_definition.tasks[0]},e}(u),Y=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),W=function(t){function e(e,n,r,o){var i=t.call(this,"Training",(function(){e(),o.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(function(){o.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(n.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),r,o)||this;return i.training_configuration=n,i}return Y(e,t),e.prototype.print_cancel_text=function(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")},e.prototype.automata_configurator=function(){return new c([0,1,2,3,4,5,6],0,(function(){}),this.transitions(),[5])},e.prototype.transitions=function(){var e=this,n=t.prototype.transitions.call(this),r=[d(0).to(6).on("Escape").if((function(){return e.training_configuration.can_be_cancelled})).do((function(t){e.print_cancel_text()})),d(1).to(6).on("Escape").if((function(){return e.training_configuration.can_be_cancelled})).do((function(t){e.print_cancel_text()})),d(3).to(6).on("Escape").if((function(){return e.current_page_index<e.experiment_definition.tasks.length-1&&e.training_configuration.can_be_cancelled})).do((function(t){e.print_cancel_text()})),d(6).to(5).on("E").do((function(){})),d(6).to(0).on("Enter").do((function(){e.experiment_definition.init_experiment(!0),e.show_intro()})),d(4).to(0).on("Enter").if((function(){return e.training_configuration.can_be_repeated})).do((function(){e.experiment_definition.init_experiment(!0),e.show_intro()})),d(4).to(5).on("E").do((function(t){}))];return n.splice(n.length-1),r.forEach((function(t){return n.push(t)})),n},e.prototype.input=function(e){if(!["a","b","c"].includes(e)&&0!=this.automata.current_state)return t.prototype.input.call(this,e);t.prototype.input.call(this,e)},e.prototype.init_experiment=function(){this.training_configuration.init_experiment(this.experiment_definition)},e}(H),Q=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),V=function(t){function e(e,n,r){return t.call(this,"Main Experiment",(function(){e(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(function(){r.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),n,r)||this}return Q(e,t),e}(H),X=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),J=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return X(e,t),e.prototype.create_code_all_experiment_automatas=function(t){t.measurement.output_writer();var e=new B("Introduction",t.introduction_texts,t.measurement),n=new B("Finish",t.finish_texts,t.measurement);n.automata.add_finish_action((function(){return t.finish_function(r.experiment_definition)}));var r=new V(t.pre_run_experiment_output,this,t.measurement);r.init_experiment();var o=this.clone(),i=new W(t.pre_run_training_output,t.training_configuration,o,t.measurement);i.init_experiment();var s=null;null!=t.post_questionnaire&&(s=new b(t.post_questionnaire,t.measurement));var a=[];return null!=e&&a.push(e),0!=i.experiment_definition.tasks.length&&a.push(i),a.push(r),null!=s&&(a.push(s),r.experiment_definition.questionnaires.push(s)),a.push(n),new F(a)},e.prototype.clone=function(){return new e(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)},e}(D),Z=function(){function t(t,e){this.variable=t,this.value=""+e}return t.prototype.clone=function(){return new t(this.variable,this.value)},t}();!function(){function t(t){this.array=t}t.prototype.do=function(t){for(var e=0,n=this.array;e<n.length;e++)t(n[e])},t.prototype.do_with_counter=function(t){for(var e=0;e<this.array.length;e++)t(this.array[e],e)}}();var $=function(){function t(t){this.treatment_combination=[],this.treatment_combination=t}return t.prototype.clone=function(){for(var e=new t([]),n=0,r=this.treatment_combination;n<r.length;n++){var o=r[n];e.treatment_combination.push(o.clone())}return e},t}(),tt=function(){function t(t){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==t&&(null!=t.fixed_treatments&&(this.fixed_treatments=t.fixed_treatments),this.can_be_cancelled=t.can_be_cancelled,this.can_be_repeated=t.can_be_repeated)}return t.prototype.init_experiment=function(t){if(t.tasks=[],null!=this.fixed_treatments)for(var e=function(e){var n=new $([]);!function(t,e){if(t.length>e.length)throw"Cannot loop both: first array has length: "+t.length+", but second has length "+e.length;for(var r=0,o=0,i=t;o<i.length;o++)s=i[o],a=e[r++],n.treatment_combination.push(new Z(s,a));var s,a}(t.all_independent_variables(),e);var r=new I(n,t,"");r.is_training=!0,t.experiment_definition_task_creator(r),t.tasks.push(r)},n=0,r=this.fixed_treatments;n<r.length;n++)e(r[n]);else t.init_experiment(!0)},t}(),et=function(t,e){this.treatments=[],this.name=t;for(var n=0,r=e;n<r.length;n++){var o=r[n];this.treatments.push(new Z(this,o))}};function nt(t,e,n){if(0==t.length)n(e);else{for(var r=t.shift(),o=0,i=r;o<i.length;o++){var s=i[o];e.push(s),nt(t,e,n),e.pop()}t.unshift(r)}}function rt(t,e){nt(t,[],e)}var ot,it=function(){function t(){this.independent_variables=[]}return t.prototype.push_variable=function(t,e){this.independent_variables.push(new et(t,e))},t.prototype.print_to_array=function(t){for(var e=0,n=this.independent_variables;e<n.length;e++){var r=n[e];t.push(r.name+";")}},t.prototype.create_treatment_combinations=function(){var t=[];return rt(this.independent_variables.map((function(t){return t.treatments})),(function(e){t.push(new $(function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}([],e,!0)))})),t},t.prototype.get_variable_named=function(t){for(var e=0,n=this.independent_variables;e<n.length;e++){var r=n[e];if(r.name===t)return r}throw"Unknown independent variable named: "+t},t.from_layout=function(e){for(var n=new t,r=0,o=e;r<o.length;r++){var i=o[r];n.push_variable(i.variable,i.treatments)}return n},t}(),st=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),at=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return st(e,t),e.prototype.print_experiment_name=function(t){this.get_html_element_by_id("STATE").innerHTML=t},e.prototype.clear_error=function(){for(var t=0,e=["STAGE_ERROR"];t<e.length;t++)for(var n=e[t],r=document.getElementById(n);r.firstChild;)r.removeChild(r.firstChild)},e.prototype.clear_stage=function(){for(var t=0,e=["STAGE","STAGE_MSG","STAGE_ERROR"];t<e.length;t++)for(var n=e[t],r=document.getElementById(n);r.firstChild;)r.removeChild(r.firstChild)},e.prototype.clear_state=function(){for(var t=0,e=["STATE","TASK"];t<e.length;t++)for(var n=e[t],r=document.getElementById(n);r.firstChild;)r.removeChild(r.firstChild)},e.prototype.print_error_string_on_stage=function(t){this.get_html_element_by_id("STAGE_ERROR").innerHTML=t},e.prototype.get_html_element_by_id=function(t){return document.getElementById(t)},e.prototype.print_string_to_state=function(t){this.get_html_element_by_id("STATE").innerHTML=t},e.prototype.print_string_on_stage=function(t){this.print_html_on_stage("<p>"+t+"</p>")},e.prototype.ask_for_input=function(){var t=document.createElement("p"),e=document.createElement("label");e.setAttribute("type","text"),t.textContent="Answer: ",t.appendChild(e);var n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","input"),t.appendChild(n),n.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(t),n.focus()},e.prototype.set_focus_on_input=function(){this.get_html_element_by_id("INPUT").focus()},e.prototype.print_string_to_page_number=function(t){this.get_html_element_by_id("TASK").innerHTML=t},e.prototype.get_given_answer=function(){return this.get_html_element_by_id("INPUT").value},e.prototype.print_on_input_response=function(t){this.get_html_element_by_id("INPUT").value=t},e.prototype.create_html_element_from_string=function(t){return(new DOMParser).parseFromString(t,"text/html").body},e.prototype.print_html_on_stage=function(t){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(t))},e.prototype.print_html_on_error=function(t){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(t))},e}(x);function ut(t){var e=[];if(0==t)return[];for(var n=1;n<=t;n++){for(var r=ut(t-n),o=0,i=r;o<i.length;o++){for(var s=[n],a=0,u=i[o];a<u.length;a++){var c=u[a];s.push(c)}e.push(s)}0==r.length&&e.push([t])}return e}function ct(t,e){if(1==e)return[[t]];for(var n=[],r=0;r<=t;r++){for(var o=ct(t-r,e-1),i=0,s=o;i<s.length;i++){var a=s[i];if(a.length!=e-1)throw"invalid partition!";for(var u=[r],c=0,l=a;c<l.length;c++){var p=l[c];u.push(p)}n.push(u)}0==o.length&&n.push([t])}return n}ut(4),ot=ut(0),console.log(ot);var lt=function(){function t(){}return t.prototype.pull_random_word=function(){return this.words.splice(U(this.words.length),1)[0]},t.prototype.pull_n_random_words=function(t){return this.pull_n_random_formatted_words(t,(function(t){return t}))},t.prototype.pull_n_random_formatted_words=function(t,e){for(var n=[],r=0;r<t;r++)n.push(e(this.pull_random_word()));return n},t.prototype.max_word_length=function(){return Math.max.apply(null,this.words.map((function(t){return t.length})))},t.prototype.min_word_length=function(){return Math.min.apply(null,this.words.map((function(t){return t.length})))},t.prototype.generate_composite_identifier_of_length=function(t){if(t<=5)return M(this.words.filter((function(e){return e.length==t})));var e=Math.floor(t/2);return this.generate_composite_identifier_of_length(e)+this.generate_composite_identifier_of_length(t-e)},t.prototype.get_random_word_of_length=function(t){var e=M(this.words.filter((function(e){return e.length==t})));if(null==e)throw"shit";return e},t.prototype.get_random_word_list=function(t,e){for(var n=this.min_word_length(),r=this.max_word_length(),o=[],i=function(t,e){for(var o=[],i=0,s=ct(t,e);i<s.length;i++){for(var a=s[i],u=!0,c=0,l=a;c<l.length;c++)if(!((p=l[c])>=n&&p<=r)){u=!1;break}if(u){if(a.length!=e&&console.log("strange"),a.length!=e)throw"wtf";o.push(a)}}var p;return o}(e,t),s=0,a=M(i);s<a.length;s++){var u=a[s];o.push(this.get_random_word_of_length(u))}return o},t.prototype.replace_letters_starting_at=function(t,e,n){var r=t.slice(0,n);r+=z([t[n]]);var o=t.slice(n+1,t.length);return this.replace_letters(o,e-1).map((function(t){return r+t}))},t.prototype.replace_letters=function(t,e){if(0==e)return""==t?[]:[t];if(1==t.length&&1==e)return[z([t[0]])];if(e>t.length)return[];for(var n=[],r=0,o=ct(e,2);r<o.length;r++)for(var i=o[r],s=1;s<t.length;s++){var a=t.slice(0,s),u=this.replace_letters(a,i[0]),c=t.slice(s);rt([u,this.replace_letters(c,i[1])],(function(t){n.push(t[0]+t[1])}))}return n},t.capitalizeFirstLetter_formatter=function(t){return String(t).charAt(0).toUpperCase()+String(t).slice(1)},t.lowerCaseFirstLetter_formatter=function(t){return String(t).charAt(0).toLowerCase()+String(t).slice(1)},t}(),pt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_t=function(t){function e(){var n=t.call(this)||this;return n.words=e.static_words.slice(),n}return pt(e,t),e.static_words=["account","achiever","acoustics","act","action","activity","actor","addition","adjustment","advertisement","advice","aftermath","afternoon","afterthought","agreement","air","airplane","airport","alarm","amount","amusement","anger","angle","animal","ants","apparatus","apparel","appliance","approval","arch","argument","arithmetic","arm","army","art","attack","attraction","aunt","authority","back","badge","bag","bait","balance","ball","base","baseball","basin","basket","basketball","bat","bath","battle","bead","bear","bed","bedroom","beds","bee","beef","beginner","behavior","belief","believe","bell","bells","berry","bike","bikes","bird","birds","birth","birthday","bit","bite","blade","blood","blow","board","boat","bomb","bone","book","books","boot","border","bottle","boundary","box","brake","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","cabbage","cable","cactus","cake","cakes","calculator","calendar","camera","camp","can","cannon","canvas","cap","caption","car","card","care","carpenter","carriage","cars","cart","cast","cat","cats","cattle","cause","cave","celery","cellar","cemetery","cent","chalk","chance","change","channel","cheese","cherries","cherry","chess","chicken","chickens","chin","church","circle","clam","cloth","clover","club","coach","coal","coast","coat","cobweb","coil","collar","color","committee","company","comparison","competition","condition","connection","control","cook","copper","corn","cough","country","cover","cow","cows","crack","cracker","crate","crayon","cream","creator","creature","credit","crib","crime","crook","crow","crowd","crown","cub","cup","current","curtain","curve","cushion","dad","daughter","day","death","debt","decision","deer","degree","design","desire","desk","destruction","detail","development","digestion","dime","dinner","dinosaurs","direction","dirt","discovery","discussion","distance","distribution","division","dock","doctor","dog","dogs","doll","dolls","donkey","door","downtown","drain","drawer","dress","drink","driving","drop","duck","ducks","dust","ear","earth","earthquake","edge","education","effect","egg","eggnog","eggs","elbow","end","engine","error","event","example","exchange","existence","expansion","experience","expert","eye","eyes","face","fact","fairies","fall","fang","farm","fear","feeling","field","finger","fire","fireman","fish","flag","flame","flavor","flesh","flight","flock","floor","flower","flowers","fly","fog","fold","food","foot","force","fork","form","fowl","frame","friction","friend","friends","frog","frogs","front","fruit","fuel","furniture","gate","geese","ghost","giants","giraffe","glass","glove","gold","government","governor","grade","grain","grandfather","grandmother","grape","grass","grip","ground","group","growth","guide","guitar","gun","hair","haircut","hall","hammer","hand","hands","harbor","harmony","hat","head","health","heat","hill","history","hobbies","hole","holiday","home","honey","hook","hope","horn","horse","horses","hose","hospital","hot","hour","house","houses","humor","hydrant","ice","icicle","idea","impulse","income","increase","industry","ink","insect","instrument","insurance","interest","invention","iron","island","jail","jam","jar","jeans","jelly","jellyfish","jewel","join","judge","juice","jump","kettle","key","kick","kiss","kittens","kitty","knee","knife","knot","knowledge","laborer","lace","ladybug","lake","lamp","land","language","laugh","leather","leg","legs","letter","letters","lettuce","level","library","limit","line","linen","lip","liquid","loaf","lock","locket","look","loss","love","low","lumber","lunch","lunchroom","machine","magic","maid","mailbox","man","marble","mark","market","mask","mass","match","meal","measure","meat","meeting","memory","men","metal","mice","middle","milk","mind","mine","minister","mint","minute","mist","mitten","mom","money","month","moon","morning","mother","motion","mountain","mouth","move","muscle","name","nation","neck","need","needle","nerve","nest","night","noise","north","nose","note","notebook","number","nut","oatmeal","observation","ocean","offer","office","oil","orange","oranges","order","oven","page","pail","pan","pancake","paper","parcel","part","partner","party","passenger","payment","peace","pear","pen","pencil","person","pest","pet","pets","pickle","picture","pie","pies","pig","pigs","pin","pipe","pizzas","place","plane","planes","plant","plantation","plants","plastic","plate","play","playground","pleasure","plot","plough","pocket","point","poison","pollution","popcorn","porter","position","pot","potato","powder","power","price","produce","profit","property","prose","protest","pull","pump","punishment","purpose","push","quarter","quartz","queen","question","quicksand","quiet","quill","quilt","quince","quiver","rabbit","rabbits","rail","railway","rain","rainstorm","rake","range","rat","rate","ray","reaction","reading","reason","receipt","recess","record","regret","relation","religion","representative","request","respect","rest","reward","rhythm","rice","riddle","rifle","ring","rings","river","road","robin","rock","rod","roll","roof","room","root","rose","route","rub","rule","run","sack","sail","salt","sand","scale","scarecrow","scarf","scene","scent","school","science","scissors","screw","sea","seashore","seat","secretary","seed","selection","self","sense","servant","shade","shake","shame","shape","sheep","sheet","shelf","ship","shirt","shock","shoe","shoes","shop","show","side","sidewalk","sign","silk","silver","sink","sister","sisters","size","skate","skin","skirt","sky","slave","sleep","sleet","slip","slope","smash","smell","smile","smoke","snail","snails","snake","snakes","sneeze","snow","soap","society","sock","soda","sofa","son","song","songs","sort","sound","soup","space","spade","spark","spiders","sponge","spoon","spot","spring","spy","square","squirrel","stage","stamp","star","start","statement","station","steam","steel","stem","step","stew","stick","sticks","stitch","stocking","stomach","stone","stop","store","story","stove","stranger","straw","stream","street","stretch","string","structure","substance","sugar","suggestion","suit","summer","sun","support","surprise","sweater","swim","swing","system","table","tail","talk","tank","taste","tax","teaching","team","teeth","temper","tendency","tent","territory","test","texture","theory","thing","things","thought","thread","thrill","throat","throne","thumb","thunder","ticket","tiger","time","tin","title","toad","toe","toes","tomatoes","tongue","tooth","toothbrush","toothpaste","top","touch","town","toy","toys","trade","trail","train","trains","tramp","transport","tray","treatment","tree","trees","trick","trip","trouble","trousers","truck","trucks","tub","turkey","turn","twig","twist","umbrella","uncle","underwear","unit","use","vacation","value","van","vase","vegetable","veil","vein","verse","vessel","vest","view","visitor","voice","volcano","volleyball","voyage","walk","wall","war","wash","waste","watch","water","wave","waves","wax","way","wealth","weather","week","weight","wheel","whip","whistle","wilderness","wind","window","wine","wing","winter","wire","wish","wood","wool","word","work","worm","wound","wren","wrench","wrist","writer","writing","yak","yam","yard","yarn","year","yoke","zebra","zephyr","zinc","zipper","zoo"],e}(lt),ht=(new _t).replace_letters("lo",2);console.log(ht);function ft(t,e,n){if(void 0===e&&(e=""),void 0===n&&(n=!1),!t)throw console.error(e),"Wrong: "+e;n&&console.log("Ok: "+e)}var dt=function(){function t(t,e){this.content=null,this.left=null,this.right=null,this.parent=null,this.left=t,null!=t&&(this.left.parent=this),this.right=e,null!=e&&(this.right.parent=this)}return t.prototype.is_left_child=function(){return null!=this.parent&&this.parent.left==this},t.prototype.is_right_child=function(){return null!=this.parent&&this.parent.right==this},t.prototype.number_of_nodes=function(){return 1+(null!=this.left?this.left.number_of_nodes():0)+(null!=this.right?this.right.number_of_nodes():0)},t.prototype.number_of_inner_nodes=function(){return this.is_leave()?0:1+(null!=this.left?this.left.number_of_inner_nodes():0)+(null!=this.right?this.right.number_of_inner_nodes():0)},t.prototype.source_string=function(){var t=[];return this.source_string_writer(t),t.join("")},t.prototype.source_string_writer=function(t){this.is_leave()?t.push(this.content):(t.push("("),null!=this.left&&this.left.source_string_writer(t),t.push(this.content),null!=this.right&&this.right.source_string_writer(t),t.push(")"))},t.prototype.clone=function(){var e=new t(null!=this.left?this.left.clone():this.left,null!=this.right?this.right.clone():this.right);return e.content=null==this.content?null:this.content.clone(),e},t.prototype.push_leaves=function(){null!=this.left?this.left.push_leaves():(this.left=new t(null,null),this.left.parent=this),null!=this.right?this.right.push_leaves():(this.right=new t(null,null),this.right.parent=this)},t.prototype.as_in_order_array=function(){var t=[];return this.as_in_order_array_writer(t),t},t.prototype.as_in_order_array_writer=function(t){null!=this.left&&this.left.as_in_order_array_writer(t),t.push(this),null!=this.right&&this.right.as_in_order_array_writer(t)},t.prototype.set_all_operator_values=function(t){var e=this.as_in_order_array();(e=e.filter((function(t){return!t.is_leave()}))).forEach((function(e){return e.content=t}))},t.prototype.set_all_leave_values=function(t){var e=this.as_in_order_array();(e=e.filter((function(t){return t.is_leave()}))).forEach((function(e){return e.content=t}))},t.prototype.is_leave=function(){return null==this.left&&null==this.right},t.prototype.call_by_value_order=function(){var t=[];return this.call_by_value_order_writer(t),t},t.prototype.call_by_value_order_writer=function(t){this.is_leave()||(null!=this.left&&this.left.call_by_value_order_writer(t),null!=this.right&&this.right.call_by_value_order_writer(t)),t.push(this)},t.prototype.has_child=function(t){return this===t||!(null==this.left||!this.left.has_child(t))||!(null==this.right||!this.right.has_child(t))},t}();function mt(t){var e=[];return gt(t,e),e}function gt(t,e){if(0!=t)if(1!=t)for(var n=0;n<t;n++){var r=t-n-1,o=[],i=[];gt(n,o),gt(r,i);for(var s=0;s<o.length;s++)for(var a=0;a<i.length;a++)e.push(new dt(o[s],i[a]))}else e.push(new dt(null,null));else e.push(null)}ft(1==mt(1).length,"Catalan number 1 = 1"),ft(2==mt(2).length,"Catalan number 2 = 2"),ft(5==mt(3).length,"Catalan number 3 = 5"),ft(14==mt(4).length,"Catalan number 4 = 14"),ft(42==mt(5).length,"Catalan number"),ft(132==mt(6).length,"Catalan number"),ft(429==mt(7).length,"Catalan number"),ft(1430==mt(8).length,"Catalan number"),ft(4862==mt(9).length,"Incorrect Catalan number"),console.log("Catalan numbers seem ok.");var yt,wt,vt,bt=function(){function t(t){this.values=[],this.values=new Array(t).fill(null)}return t.prototype.do_matching=function(t,e,n){for(var r=this.clone(),o=t.clone(),i=!1,s=!1,a=0;a<e.length;a++){var u=this.values[e[a]],c=t.values[n[a]];if(u!==c)if(null===u)r.values[e[a]]=c,i=!0;else{if(null!==c)return{matches:!1,left:null,has_left_variable_replacements:!1,right:null,has_right_variable_replacements:!1};o.values[n[a]]=u,s=!0}}return{matches:!0,left:r,has_left_variable_replacements:i,right:o,has_right_variable_replacements:s}},t.prototype.clone=function(){for(var e=new t(this.number_of_variables),n=[],r=0,o=this.values;r<o.length;r++){var i=o[r];n.push(i)}return e.values=n,e},t.prototype.do_print=function(){console.log(this.values.join(", "))},t}(),kt=function(){function t(t){this.rows=[],this.rows.push(new bt(t))}return t.Empty_Logical_Results=function(e){var n=new t(e);return n.rows=[],n},t.Logical_Results_FROM_SOLUTION_ARRAY=function(e,n){for(var r=t.Empty_Logical_Results(e),o=0,i=n;o<i.length;o++){var s=i[o];r.add_solution_array(s)}return r},t.prototype.has_contradiction=function(){return 0===this.rows.length},t.prototype.add_solution_array=function(t){var e=new bt(this.number_of_variables);e.values=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}([],t,!0),this.rows.push(e)},t.prototype.unify_results=function(t,e,n){1==this.rows.length&&null==this.rows[0]&&console.log("stop");for(var r=[],o=[],i=[],s=[],a=0,u=0,c=this.rows;u<c.length;u++){var l=c[u];a++;for(var p=0,_=0,h=t.rows;_<h.length;_++){var f=h[_];p++;var d=null;try{d=l.do_matching(f,e,n)}catch(t){throw d=l.do_matching(f,e,n),"something is wrong"}d.matches&&(i.includes(a)||(r.push(d.left),d.has_left_variable_replacements||i.push(a)),s.includes(p)||(o.push(d.right),d.has_right_variable_replacements||d.has_right_variable_replacements||s.push(p)))}}this.rows=r,t.rows=o},t.prototype.do_print=function(){for(var t=0,e=this.rows;t<e.length;t++)e[t].do_print()},t.prototype.solutions=function(){return this.rows},t.prototype.random_result_for_column=function(e){var n=new t(this.number_of_variables);return n.rows=[this.random_row_for_random_column_value(2)],n},t.prototype.random_row_for_random_column_value=function(t){var e=M(this.elements_of_column_with_unique_results(t)),n=M(this.rows_with_value_matching(t,e));return this.rows[n]},t.prototype.elements_of_column_with_unique_results=function(t){var e=[];return this.rows.forEach((function(n){var r=n.values[t];e.includes(r)||e.push(r)})),e},t.prototype.rows_with_value_matching=function(t,e){for(var n=[],r=0;r<this.rows.length;r++)this.rows[r].values[t]==e&&n.push(r);return n},t}();function xt(t,e){var n=new kt(t);n.rows=[];for(var r=0,o=e;r<o.length;r++){var i=o[r],s=new bt(t);for(var a in s.values=[],i){var u=i[a];s.values.push(u)}n.rows.push(s)}return n}yt=xt(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),wt=xt(2,[{x:2,y:3}]),yt.unify_results(wt,[1,2],[0,1]),ft(2==yt.rows.length&&1==wt.rows.length,"Unify 1 (all right): with possibly double entries right "+yt.rows.length+" -- "+wt.rows.length),yt=xt(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),wt=xt(2,[{x:2,y:3},{x:3,y:3}]),yt.unify_results(wt,[1,2],[0,1]),ft(4==yt.rows.length&&2==wt.rows.length,"Unify 2 (all right): with possibly double entries right "+yt.rows.length+" -- "+wt.rows.length),yt=xt(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),wt=xt(2,[{x:2,y:3}]),yt.unify_results(wt,[1],[0]),ft(2==yt.rows.length&&1==wt.rows.length,"Unify 3 (only subset right): with possibly double entries right "+yt.rows.length+" -- "+wt.rows.length),wt=xt(6,[{x:2,y:3}]),yt=xt(6,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),wt=xt(6,[{x:2}]),yt.unify_results(wt,[1],[0]),ft(2==yt.rows.length&&1==wt.rows.length,"Unify 4 (on unbound variable left) "+yt.rows.length+" -- "+wt.rows.length),ft(2===yt.rows[0].values[1],"Unify 3 (unbounded becomes bounded) "+yt.rows.length+" -- "+wt.rows.length),yt=xt(2,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),wt=xt(2,[{x:2},{x:3}]),yt.unify_results(wt,[1],[0]),ft(4===yt.rows.length&&2==wt.rows.length,"Unify 5 (multiple variable bindings) "+yt.rows.length+" -- "+wt.rows.length),ft(2===yt.rows[0].values[1],"Unify 5 (multiple variable bindings - unbounded variable is now bounded"),yt=xt(2,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),wt=xt(1,[{x:null}]),yt.unify_results(wt,[1],[0]),ft(2==yt.rows.length&&1==wt.rows.length,"Unify 6 (unifying unbounded variables) "+yt.rows.length+" -- "+wt.rows.length),ft(null===yt.rows[0].values[1],"Unify 6 (multiple variable bindings - unbounded variable is now bounded - 1st"),ft(null===wt.rows[0].values[0],"Unify 6 (multiple variable bindings - unbounded variable is now bounded - 2nd"),yt=new kt(3),wt=xt(1,[{x:1},{x:2},{x:3}]),yt.unify_results(wt,[1],[0]),ft(3==yt.rows.length&&3==wt.rows.length,"Unify 7 "+yt.rows.length+" -- "+wt.rows.length),yt=function(){var t=new kt(6);t.rows=[];for(var e=0,n=[[1,2,3,4,5,6],[1,3,3,4,5,6]];e<n.length;e++){var r=n[e],o=new bt(6);o.values=[];for(var i=0,s=r;i<s.length;i++){var a=s[i];o.values.push(a)}t.rows.push(o)}return t}(),wt=new kt(3),yt.unify_results(wt,[1],[0]),ft(2==yt.rows.length&&2==wt.rows.length,"Unify 8 "+yt.rows.length+" -- "+wt.rows.length),ft(2===yt.rows[0].values[1],"Unify 8 (multiple variable bindings - unbounded variable is now bounded - 1st"),ft(3===yt.rows[1].values[1],"Unify 8 (multiple variable bindings - unbounded variable is now bounded - 2nd"),console.log("ok, logic programming seems to work."),(vt=Nof1).SET_SEED=R,vt.new_random_integer=U,vt.BROWSER_EXPERIMENT=function(t){var e=new at,n=t(e);R(n.seed);var r=n.measurement(e),o=function(t){var e=it.from_layout(t.layout),n=new L(e,t.repetitions),r=new J(t.experiment_name,!1,n,e,t.repetitions,t.measurement,t.task_configuration),o=new tt(t.training_configuration);return r.create_code_all_experiment_automatas({seed:t.seed,introduction_texts:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_output,training_configuration:o,pre_run_experiment_output:t.pre_run_experiment_output,finish_texts:t.finish_pages,measurement:t.measurement,finish_function:t.finish_function})}({experiment_name:n.experiment_name,seed:n.seed,introduction_pages:n.introduction_pages,post_questionnaire:n.post_questionnaire,pre_run_training_output:n.pre_run_training_instructions,training_configuration:n.training_configuration,pre_run_experiment_output:n.pre_run_experiment_instructions,finish_pages:n.finish_pages,layout:n.layout,repetitions:n.repetitions,task_configuration:n.task_configuration,measurement:r,finish_function:function(t){var e,n,r;document.removeEventListener("keydown",i),e=t.generate_csv_data(),n=new Blob(e,{type:"application/ssc"}),(r=window.document.createElement("a")).href=window.URL.createObjectURL(n),r.download="experimentdata.csv",document.body.appendChild(r),r.click(),document.body.removeChild(r)}}),i=function(t){var e,n,r=(n="","Alt"==(e=t).key&&e.ctrlKey?"Alt+Ctrl":"Control"==e.key&&e.altKey?"Ctrl+Alt":(n+=e.altKey?"+Alt":"",n+=e.ctrlKey?"+Control":"","Alt"==e.key?"Alt":""+e.key+n));o.input(r)};document.addEventListener("keydown",i,!1),o.set_active()},vt.text_input_experiment=function(t){return new S(t)},vt.new_random_integer=U,vt.Time_to_finish=function(t){return function(e){return new q(t(e))}},vt.Time_to_finish_with_penality=function(t,e){return function(n){return new C(t(n),e)}},vt.Reaction_time=function(t){return function(e){return new O(t(e))}},vt.Reaction_time_with_penalty=function(t,e){return function(n){return new j(t(n),e)}},vt.keys=function(t){return function(e){return new A(t,e)}},vt.Nouns=_t,vt.Verbs=function(){this.words=["drip","touch","trouble","start","communicate","jog","order","strip","coach","relax","vanish","connect","shock","spray","radiate","spill","hate","rinse","seal","kiss","ask","train","handle","replace","cover","plan","jump","lick","jail","gather","comb","knit","drain","meddle","alert","ask","train","handle","replace","cover","plan","jump","lick","jail","gather","comb","knit","drain","meddle","alert","instruct","arrive","smash","worry","knock","satisfy","fade","time","record","hug","film","sip","request","miss","own","hook","unfasten","pop","drown","gaze","escape","hang","boil","discover","count","work","flower","precede","reproduce","blush","punish","hope","destroy","call","use","surprise","muddle","notice","confess","carry","lie","spell","heap","fasten","fire","flash","carve","accept","like","crush","rock","kill","joke","attempt","protect","concern","suit","appear","agree","sail","shrug","trace","rot","pretend","stir","chop","name","slow","injure","program","man","plant","examine","reply","face","promise","observe","copy","retire","mine","moan","attend","admire","command","learn","answer","prepare","impress","argue","whine","consist","interest","branch","bubble","realise","melt","walk","shop","squeeze","hum","tempt","spoil","remove","race","doubt","step","judge","desert","tap","afford","part","deliver","float","apologise","switch","share","phone","applaud","print","note","wreck","scream","follow","blink","arrange","sign","guarantee","stain","wash","lighten","tame","change","laugh","brake","tick","hammer","mate","mourn","smell","close","invite","rain","warm","occur","puncture","memorise","slap","terrify","check","delight","bolt","cross","settle","spare","type","guard","back","bore","poke","preach","fear","grin","approve","level","wave","pedal","stitch","obey","compare","ski","paint","serve","consider","bare","shelter","risk","bat","rub","double","mix","appreciate","disapprove","exercise","remember","smile","invent","enjoy","clear","cry","dress","flow","skip","empty","decorate","soak","suffer","produce","place","dream","guess","whip","burn","interfere","jam","trick","lock","talk","queue","tickle","complete","stuff","sound","confuse","introduce","amuse","paste","travel","number","water","scrape","correct","borrow","behave","snore","wink","excite","attract","mess up","reflect","camp","mark","tumble","soothe","point","disagree","provide","suspect","license","return","sparkle","buzz","juggle","continue","list","cure","nest","post","try","preserve","offend","challenge","develop","spark","enter","cause","identify","curl","frighten","tremble","peck","describe","squeak","remind","rob","sneeze","turn","listen","frame","rely","last","twist","reduce","tie","grease","welcome","rush","charge","dance","refuse","expect","embarrass","unite","disappear","ban","grate","bomb","pat","bless","hand","reign","strengthen","overflow","balance","announce","squash","pick","regret","unlock","spot","wrap","waste","remain","drop","scrub","flap","dislike","dare","x-ray","compete","repair","pour","harass","join","multiply","chase","sack","moor","fold","tug","receive","flood","prick","kick","fail","expand","fill","sin","wonder","decay","subtract","fax","signal","shade","curve","greet","clip","irritate","tip","depend","want","beg","file","earn","recognise","supply","dry","exist","collect","add","form","drum","deceive","zoom","march","annoy","murder","watch","heat","fry","dust","bleach","separate","bury","saw","polish","wriggle","stay","wish","brush","trip","weigh","colour","test","blot","open","itch","zip","wobble","paddle","cheer","extend","nod","yell","fix","dam","fetch","transport","visit","found","load","interrupt","long","tour","suppose","stretch","store","raise","pray","pine","divide","happen","punch","bang","stamp","yawn","disarm","question","obtain","haunt","admit","stop","ruin","influence","scold","pass","whisper","groan","succeed","need","mug","analyse","telephone","rescue","wipe","marry","advise","pump","explode","fence","crawl","bow","improve","thank","attack","manage","support","reject","tow","cheat","perform","educate","warn","grab","stroke","drag","move","peel","roll","knot","unpack","nail","possess","trade","pack","fool","kneel","blind","prefer","object","encourage","match","inform","bounce","wander","boast","beam","fit","present","squeal","treat","repeat","launch","fancy","label","explain","increase","land","choke","excuse","wrestle","screw","report","measure","sigh","harm","scratch","cough","imagine","mend","save","scatter","breathe","decide","rule","avoid","calculate","box","peep","detect","contain","grip","release","crack","offer","undress","whirl","permit","live","force","sprout","entertain","pinch","glue","love","hunt","scare","push","coil","untidy","bruise","wait","damage","sniff","trust","belong","crash","attach","pause","heal","battle","pull","plug","end","snow","bake","bump","deserve","intend","prevent","hurry","practise","play","reach","clap","delay","chew","matter","book","complain","milk","care","concentrate","strap","tire","cycle","trot","taste","scribble","hover","look","ignore","suck","hop","trap","shave","glow","owe","guide","press","head","whistle","snatch","rhyme","please","scorch","suspend","wail","smoke","thaw","arrest","stare","slip","clean","claim","suggest","surround","bathe","steer","search","park","inject","employ","shiver","tease","rejoice","allow","include","help"]},vt.create_catalan_graphs=mt,vt.Logical_Results=kt,vt.array_of_rows_to_logical_result=xt,vt.free_text=function(t,e){return new v(t,e)},vt.alternatives=function(t,e,n){return new w(t,e,n)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,